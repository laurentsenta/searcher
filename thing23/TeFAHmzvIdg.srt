1
00:00:00,000 --> 00:00:10,840
Right, good afternoon everyone. This is Ryan, co-founder of Portrait, and today I'll be


2
00:00:10,840 --> 00:00:19,160
talking about how we're using IPFS to build decentralized websites. So, the IPFS ecosystem


3
00:00:19,160 --> 00:00:25,960
offers opportunities for data ownership, for privacy and for control, and when you're building


4
00:00:25,960 --> 00:00:32,440
decentralized websites or creating tools to build decentralized websites, you have to


5
00:00:32,440 --> 00:00:38,240
face certain challenges which you don't really discover or see in web2. So, we're talking


6
00:00:38,240 --> 00:00:45,120
about storage and content distribution and also about user experience and identity. So,


7
00:00:45,120 --> 00:00:51,240
I'm happy that I will be talking about that today, and let's dive a bit more deeper in


8
00:00:51,240 --> 00:00:59,080
like user apps being built on top of IPFS. So, this talk will be a bit technical, but


9
00:00:59,080 --> 00:01:04,920
also a bit more on the side of production. So, we are building an app out there that's


10
00:01:04,920 --> 00:01:11,800
actually running on top of IPFS. Today, Portrait has over 10,000 users and we have a lot of


11
00:01:11,800 --> 00:01:18,440
learnings from that, and there are a lot of small design challenges you're facing, and


12
00:01:18,440 --> 00:01:23,800
we'll talk a bit more about those. So, first off, we'll kick off with Portrait, why Portrait,


13
00:01:23,800 --> 00:01:30,320
how Portrait works as well, and then we'll kind of jump into IPFS. So, why IPFS, why


14
00:01:30,320 --> 00:01:36,760
is Portrait building on top of IPFS, and then we'll talk about solving design challenges.


15
00:01:36,760 --> 00:01:41,400
And there are a few design challenges out there we haven't solved yet, and we are very


16
00:01:41,400 --> 00:01:47,280
like eager to fix them ourselves, but obviously today we're a team of two, by the way, so


17
00:01:47,280 --> 00:01:52,120
it's quite hard to balance 10,000 users and trying to come up with new solutions to certain


18
00:01:52,120 --> 00:01:57,120
problems, right? So, also putting those out there, and some stuff we're excited about


19
00:01:57,120 --> 00:02:04,400
and a short recap. So, the new internet is about self-sovereign identity, right? So,


20
00:02:04,400 --> 00:02:08,440
you should be able to control your identity, express who you are in the way you'd like


21
00:02:08,440 --> 00:02:17,240
to do that. And if we look at how Web3 does that today, there are a few things that quite


22
00:02:17,240 --> 00:02:24,160
concerned us at the time. So, let's say you'd like to write a blog, then you should probably


23
00:02:24,160 --> 00:02:31,040
use Mirror or Paragraph or any of the many solutions out there. There are a lot of solutions


24
00:02:31,040 --> 00:02:35,640
out there to write your blog. And what if you're an artist and you'd like to kind of


25
00:02:35,640 --> 00:02:41,960
publish your new NFT release or release your new collection, then Alchemy says that there


26
00:02:41,960 --> 00:02:49,640
are 135 solutions out there to do so. But what if you'd like to do both? What if you'd


27
00:02:49,640 --> 00:02:57,320
like to kind of write your blog and release NFTs, then, and like, those are two things,


28
00:02:57,320 --> 00:03:01,320
but what if you add a third one, a fourth one, or a fifth one? And for every solution


29
00:03:01,320 --> 00:03:06,840
out there, there's a DApp. But at the end of the day, let's take Joe for an example


30
00:03:06,840 --> 00:03:11,720
here, you have kind of one identity. So, let's say that Joe owns Joe.eth and that's one identity.


31
00:03:11,720 --> 00:03:17,240
And Joe doesn't want to have all of his data or all of his creations and his expressions


32
00:03:17,240 --> 00:03:23,120
scattered around the web, right? Because he has Joe.eth and Joe.eth is more than a textual


33
00:03:23,120 --> 00:03:33,040
representation of your Ethereum address. Joe.eth is also a visual representation of his Ethereum


34
00:03:33,040 --> 00:03:41,320
address. And we can actually do that by going to the ENS domain manager and using the power


35
00:03:41,320 --> 00:03:49,720
of IPFS to kind of link a SID, an IPFS SID, an IPFS hash to his identity. And we have


36
00:03:49,720 --> 00:03:54,840
already been working on implementing this into several browsers, not us as portrait,


37
00:03:54,840 --> 00:04:01,440
obviously, but us in the space. So, if you head over to gilliam.eth, which is my co-founder,


38
00:04:01,440 --> 00:04:07,240
by the way, if you head over to gilliam.eth in Oprah or Brave, it natively resolves. You


39
00:04:07,240 --> 00:04:13,280
don't even have to install an extension or anything. And in Google Chrome, if you installed


40
00:04:13,280 --> 00:04:19,840
MetaMask, which I think every one of us here who uses MetaMask in Chrome as well, like,


41
00:04:19,840 --> 00:04:25,560
all right, there's a few hands there, but if you actually use MetaMask in Chrome or


42
00:04:25,560 --> 00:04:30,880
any other browser, by the way, that doesn't really matter, you can head over to your ETH


43
00:04:30,880 --> 00:04:36,680
domain. So, let's say gilliam.eth in Chrome as well. So, it's not natively built in there,


44
00:04:36,680 --> 00:04:41,920
but you can use MetaMask, which kind of, I don't know if anyone even was aware of that.


45
00:04:41,920 --> 00:04:48,240
So, what's happening then is that you can actually, again, it's a single content hash


46
00:04:48,240 --> 00:04:55,720
to a single source, but Joe or Gilliam would like to bring all those kind of sources into


47
00:04:55,720 --> 00:05:02,600
one kind of visual representation. And if you'd like to do that today, the only way


48
00:05:02,600 --> 00:05:08,760
to do that is actually building your own website. And let's say you're a Web3 creator and you


49
00:05:08,760 --> 00:05:15,160
take the entire set of Web3 creators, then only the technical subset of those creators


50
00:05:15,160 --> 00:05:20,280
are able to actually design and code their own website and then use either Fleek or 3rd


51
00:05:20,280 --> 00:05:25,980
Web to publish their website. And that's where Portrait comes in. So, we are the visual expression


52
00:05:25,980 --> 00:05:32,920
layer of Web3. We offer a decentralized website builder and protocol that allows Web3 creators


53
00:05:32,920 --> 00:05:40,280
to truly express themselves and create, control, and govern their own visual identity. So,


54
00:05:40,280 --> 00:05:44,940
your portrait is, again, fully controlled and owned by you and requires no coding or


55
00:05:44,940 --> 00:05:51,240
design experience. It's your kind of visual representation of your Ethereum address for


56
00:05:51,240 --> 00:05:57,480
the new internet. So, we're actually live today. We have a private beta. And, again,


57
00:05:57,480 --> 00:06:02,480
we have over 10,000 users right now. So, I'll try to give a live demo. I know that the previous


58
00:06:02,480 --> 00:06:10,880
demo, there was kind of like the Wi-Fi can be quite bad. So, let's hope it works. So,


59
00:06:10,880 --> 00:06:25,160
this is our builder. You can actually... There it is. So, essentially, anyone should be able


60
00:06:25,160 --> 00:06:31,860
to create their own portrait, their own decentralized website. This is kind of a pain for me because


61
00:06:31,860 --> 00:06:38,380
I'm having to look on that screen to actually build a portrait. But let's try anyways. So,


62
00:06:38,380 --> 00:06:47,960
you can select any of these components, which kind of look similar to any conventional website


63
00:06:47,960 --> 00:07:00,400
builder. But it's actually much more than that. So, let's... So, let's say we have an


64
00:07:00,400 --> 00:07:13,820
avatar. Which should go in here. And there's the avatar. And what's happening right now,


65
00:07:13,820 --> 00:07:18,540
everything is being stored, is pinned on IPFS. And we've partnered up with Asteroid to actually


66
00:07:18,540 --> 00:07:38,860
offload these files onto the Filecoin network as well. All right. So, I'll just add Joe


67
00:07:38,860 --> 00:07:45,980
here and then I'll call it a day for now. Otherwise, it'll hurt my neck too much. So,


68
00:07:45,980 --> 00:07:51,520
what we also do is we're adding tags. And these tags are stored on chain as well. So,


69
00:07:51,520 --> 00:07:56,640
that we can kind of create recommendations for other users to find and connect with like-minded


70
00:07:56,640 --> 00:08:03,420
individuals. So, I'm publishing this right now. You're actually signing with your Ethereum


71
00:08:03,420 --> 00:08:09,840
address the contents of the website. And when we're signing it, we're actually attestating


72
00:08:09,840 --> 00:08:16,000
the transaction or kind of we are delegating the authority of updating your portrait to


73
00:08:16,000 --> 00:08:22,120
another party. Which in this case is us. I'll dive a bit deeper into the contract in a bit.


74
00:08:22,120 --> 00:08:33,280
And then once the transaction itself has settled, the portrait is updated. Right now, it's a


75
00:08:33,280 --> 00:08:43,160
bit obviously empty, but we can actually showcase how it works in Brave. So, for example, this


76
00:08:43,160 --> 00:08:51,440
is the DNS domain link to the specific portrait. And this natively resolves. And this is all


77
00:08:51,440 --> 00:09:03,320
on IPFS and Filecoin. So, I think, yeah. So, yeah, again, this is a very easy, like low-level


78
00:09:03,320 --> 00:09:08,320
example. We have some private invite codes. So, Gilliam is in the back. And if you'd like


79
00:09:08,320 --> 00:09:14,440
an invite code, reach out. He'll give you an invite code. So, I'll actually dive a bit


80
00:09:14,440 --> 00:09:21,040
into the protocol. This is a very early implementation of the protocol as well. We're in beta. But


81
00:09:21,040 --> 00:09:28,520
I'll dive a bit deeper into a pretty cool design challenge we have solved. So, this


82
00:09:28,520 --> 00:09:34,200
is the actual contract itself. And one of the design challenges we face is that on one


83
00:09:34,200 --> 00:09:41,000
side you don't want to have the user or make the user pay for every transaction to update


84
00:09:41,000 --> 00:09:47,480
the state. Especially if you're kind of releasing the protocol on a very cheap network. So,


85
00:09:47,480 --> 00:09:53,200
let's say you're just updating the state of a portrait through Polygon or any like very


86
00:09:53,200 --> 00:09:58,480
cheap one to update the state, right? You kind of are able to cover those costs by yourself


87
00:09:58,480 --> 00:10:05,400
quite easily. So, why go out and about to make the user pay for that? So, from one angle,


88
00:10:05,400 --> 00:10:12,360
you have the fact that if we kind of are the one that updates the state of your portrait,


89
00:10:12,360 --> 00:10:18,520
then who's actually governing portrait itself? The one that is able to kind of update the


90
00:10:18,520 --> 00:10:23,480
state. And if you're always delegating authority to us, then it's basically you're always relying


91
00:10:23,480 --> 00:10:32,120
on us. So, it's kind of we have two functions right now, which is set personal IPFS by proof,


92
00:10:32,120 --> 00:10:36,160
which is kind of delegating authority to us and kind of gives us a proof to update the


93
00:10:36,160 --> 00:10:40,480
state of your portrait within the contract. And the other one is kind of the fallback,


94
00:10:40,480 --> 00:10:46,680
where you're always able to update the hash by yourself if you'd like to. So, let's say


95
00:10:46,680 --> 00:10:53,640
the kind of backend of portrait today or our provider that kind of does all the transactions


96
00:10:53,640 --> 00:10:59,840
is falling away today, will fall away, then we always have this catch. And that means


97
00:10:59,840 --> 00:11:08,800
that the user is always able to do so, kind of update the portrait by himself. In addition,


98
00:11:08,800 --> 00:11:14,120
a lot of people are building portraits and you can either do one or two things. You can


99
00:11:14,120 --> 00:11:20,800
either upload the entirety of the website, or you can kind of create two separate processes


100
00:11:20,800 --> 00:11:24,960
where on one side you have a renderer, which kind of takes an information and then creates


101
00:11:24,960 --> 00:11:30,720
a website from it. So, what we've done is we actually separated the data from the website


102
00:11:30,720 --> 00:11:35,880
renderer itself and the website renderer itself can actually easily be deployed on IPFS. And


103
00:11:35,880 --> 00:11:42,200
that by itself saves quite some storage if you're looking at storage protocols beyond


104
00:11:42,200 --> 00:11:50,240
Filecoin, because Filecoin tends to be really cheap for like low level storage, but other


105
00:11:50,240 --> 00:11:58,240
protocols out there can become quite expensive if you're uploading multiple MBs, right? So,


106
00:11:58,240 --> 00:12:03,800
on this note, this by itself resulted in another design challenge, which we haven't solved


107
00:12:03,800 --> 00:12:13,600
yet. So, if any, I'll tell that in retrospect. So, this is a quick example, quick demo. I


108
00:12:13,600 --> 00:12:20,000
can actually show a bit more right now because I'm not actually having to turn my neck all


109
00:12:20,000 --> 00:12:27,280
the time. So, you can add different types of components and really like make your decentralized


110
00:12:27,280 --> 00:12:36,880
website feel and experience kind of like Web 2.0. So, not only are creators able to build


111
00:12:36,880 --> 00:12:43,600
a portrait, but my grandma, my mom should be able to create a portrait too. So, we really


112
00:12:43,600 --> 00:12:52,840
focus on the UX there. Yeah, you can customize it the way you want. We have teams as well.


113
00:12:52,840 --> 00:13:00,600
And tomorrow, I'll be actually giving a talk about how we kind of use AI, we use OpenAI's


114
00:13:00,600 --> 00:13:09,840
chat GPT to fetch data, map to your Ethereum address, and then create a portrait, which


115
00:13:09,840 --> 00:13:16,680
can be kind of scarily accurate. And we had people reach out to us and ask, how do you


116
00:13:16,680 --> 00:13:23,240
actually know this about me? So, from that angle, it will be more a talk about the ethical


117
00:13:23,240 --> 00:13:29,200
side and kind of should we share all this or should we openly put all this personal


118
00:13:29,200 --> 00:13:36,840
data on chain? But that's a talk for tomorrow. So, let's head back into... Yeah, that sounds


119
00:13:36,840 --> 00:13:42,800
good. So, yeah. We just like scratched the surface of how Portrait uses IPFS. And let's


120
00:13:42,800 --> 00:13:50,560
dive a bit deeper into that. So, when building kind of products, you approach it with a certain


121
00:13:50,560 --> 00:13:56,160
design philosophy. And when building products in Web3, you always have this trade off between


122
00:13:56,160 --> 00:14:02,360
UX on one side and decentralization on the other side. But kind of in a Web3 world, we


123
00:14:02,360 --> 00:14:08,800
tend to map decentralization to blockchain governance. If a single entity governs a network,


124
00:14:08,800 --> 00:14:15,920
it's centralized. And we kind of view or look at this from like this binary thing where


125
00:14:15,920 --> 00:14:23,160
it's either true or false. And we have to wonder if that actually applies for the web


126
00:14:23,160 --> 00:14:31,360
as well. And that isn't really the case. Because when we're building dApps, we're often relying


127
00:14:31,360 --> 00:14:38,840
on an infura or an alchemy to be kind of either the RPC endpoint or to provide us on-chain


128
00:14:38,840 --> 00:14:46,240
information. And that by itself, relying on a single API provider is centralized. But


129
00:14:46,240 --> 00:14:52,160
that doesn't really matter. And that's actually pretty okay to do. Because anyone at any given


130
00:14:52,160 --> 00:14:59,920
time can verify whether either alchemy or infura is actually sending the correct information


131
00:14:59,920 --> 00:15:06,800
out. So on top of that, it kind of leads to the panopticon principle. It's a psychology


132
00:15:06,800 --> 00:15:16,380
principle where because of the fact we can verify the chain at any given time, we actually


133
00:15:16,380 --> 00:15:22,440
have to do it less. So this kind of originates from a prison principle where you kind of


134
00:15:22,440 --> 00:15:31,320
had a guard tower in the middle, and then you'd have all the inmates in a circular form


135
00:15:31,320 --> 00:15:39,880
around the guard tower, so to speak. And as a result, you had to hire less guards because


136
00:15:39,880 --> 00:15:48,240
the guard in the tower could look into any specific prison cell at any given time. And


137
00:15:48,240 --> 00:15:55,840
on top of that, for bad actors, or not necessarily intentionally bad actors, but for incorrect


138
00:15:55,840 --> 00:16:01,920
data, so to speak, it's kind of a one-way street where, let's say, a certain API provider


139
00:16:01,920 --> 00:16:06,880
provides incorrect information, which kind of does harm to the network or to the community


140
00:16:06,880 --> 00:16:14,040
and the ecosystem. Then it's easy for us to kind of shift from A to B or from B to C.


141
00:16:14,040 --> 00:16:25,200
So that's really interesting. But if we compare kind of how we accept kind of the infuriating


142
00:16:25,200 --> 00:16:32,540
alchemies within the depths, no one ever considers that decentralized. There's a few things we


143
00:16:32,540 --> 00:16:39,660
really underestimate here. One is that it might take a few minutes for the guard to


144
00:16:39,660 --> 00:16:49,340
actually visit the cell of, let's say, the bad actor. The second one is... So that results


145
00:16:49,340 --> 00:16:53,800
in there's a certain time period, a certain epoch, in which a bad actor can actually do


146
00:16:53,800 --> 00:17:00,040
harm to the network. The second one is, unlike shining a flashlight into a cell, which is


147
00:17:00,040 --> 00:17:06,840
quite an easy process, actually verifying the data on-chain requires quite some work.


148
00:17:06,840 --> 00:17:11,680
So let's say you're starting from a zero state, then you actually have to sync the entire


149
00:17:11,680 --> 00:17:22,160
chain or, in terms of bandwidth storage, that's quite some work. With IPFS, that's much easier.


150
00:17:22,160 --> 00:17:28,240
However, we're still doing it in the same fashion. So we can fetch data from a centralized


151
00:17:28,240 --> 00:17:35,760
gateway and if the gateway is compromised or a bad actor, we can actually shift to another


152
00:17:35,760 --> 00:17:41,920
gateway and then that specific gateway that served incorrect content is now kind of losing


153
00:17:41,920 --> 00:17:51,440
its reputation. However, if you're comparing the work it takes with Ethereum and IPFS,


154
00:17:51,440 --> 00:17:58,240
IPFS is much, much easier because with IPFS, you can use packages such as multi-formats


155
00:17:58,240 --> 00:18:05,840
to actually practically instantly verify whether data which comes from a gateway is correct


156
00:18:05,840 --> 00:18:12,080
or not. That's one of the design challenges we face at Portrait. That's also the main


157
00:18:12,080 --> 00:18:20,240
reason why IPFS is the backbone of Portrait. Our approach to Portrait and I think an approach


158
00:18:20,240 --> 00:18:25,760
to building Web3 products in general is to be agnostic to protocols or solutions out


159
00:18:25,760 --> 00:18:33,080
there as much as possible. However, we're still in a foundation built on top of IPFS.


160
00:18:33,080 --> 00:18:40,120
So it's easy to shift from one gateway to another and it's also easy to actually validate


161
00:18:40,120 --> 00:18:47,680
the content that's being served. This is actually a strange one. With the power of


162
00:18:47,680 --> 00:18:54,280
IPLD, IPFS is designed in such a way that you can even go as far as creating these trustless


163
00:18:54,280 --> 00:19:02,080
dApps that mostly rely on a single centrally governed AWS S3 instance, which by itself


164
00:19:02,080 --> 00:19:10,120
Amazon, which by itself is governed by a single global conglomerate named Amazon. That would


165
00:19:10,120 --> 00:19:18,440
by itself be more trustless and more easily verifiable than running a decentralized dApp


166
00:19:18,440 --> 00:19:26,960
that mostly relies on a centralized blockchain RPC endpoint or API provider. When you think


167
00:19:26,960 --> 00:19:34,720
about it, that's kind of, well, you have AWS on the other side, how can it be more decentralized


168
00:19:34,720 --> 00:19:44,000
and more trustless than Ethereum or at least an Ethereum API provider? We kind of adopted


169
00:19:44,000 --> 00:19:50,400
this philosophy of decentralization is not mutually exclusive. It's kind of this spectrum


170
00:19:50,400 --> 00:19:56,460
where you have trade-offs between UX and trade-offs between decentralization and your aim should


171
00:19:56,460 --> 00:20:14,960
always be to create a product which is...


172
00:20:00,000 --> 00:20:03,360
as trustless as possible while still having a great UX.


173
00:20:05,120 --> 00:20:11,600
So in the end, relying on if you run out for reading and writing data to your dApp, it's actually a good thing,


174
00:20:11,600 --> 00:20:16,080
good thing and better than running a centralized MongoDB instance.


175
00:20:17,600 --> 00:20:25,360
So what kind of challenges have we solved and are we working on today? One of those challenges is


176
00:20:25,360 --> 00:20:30,800
working, kind of dealing with bad actors and compromised gateways, which we just spoke about.


177
00:20:30,800 --> 00:20:38,160
We solve those issues by doing client-side verification of actually the content that's


178
00:20:38,160 --> 00:20:45,200
being served. Second one is we're combining content addressing with location-based addressing,


179
00:20:45,840 --> 00:20:53,760
kind of to improve loading speed but still keep the kind of trustless level of portrait


180
00:20:53,760 --> 00:20:58,800
pretty high, pretty strong. So the third one is how we are improving the speed of serving


181
00:20:58,800 --> 00:21:05,280
decentralized web content by using IPFS with other on-chain storage protocols.


182
00:21:06,640 --> 00:21:12,400
And this one actually... So the first thing we're looking at is content addressing


183
00:21:13,120 --> 00:21:20,320
combined with location-based addressing and we got inspired by the HTML integrity attribute


184
00:21:20,320 --> 00:21:27,840
and that's basically... That's like in the standards of HTML and it's quite underestimated.


185
00:21:27,840 --> 00:21:34,560
I will dive a bit deeper into it right now because we started off with using a mix


186
00:21:34,560 --> 00:21:40,720
of location-based and content addressing by actually using a gateway and then pretty much


187
00:21:40,720 --> 00:21:48,000
adding the IPFS hash to it, right? Then we kind of moved to using the IPFS prefix


188
00:21:48,000 --> 00:21:54,000
and then letting either the browser or an extension kind of work out which gateway would be the best


189
00:21:54,000 --> 00:22:01,440
possible. The third step would be what if we kind of shift things around? What if we kind of use


190
00:22:01,440 --> 00:22:10,640
my IPFS hash as a second kind of layer to a location-based address? So what you can do is


191
00:22:10,640 --> 00:22:17,680
you can actually use Amazon S3 to improve loading speed and improve getting the actual data


192
00:22:17,680 --> 00:22:24,880
onto the client but you can still kind of verify whether or not that data is actually somewhere on


193
00:22:24,880 --> 00:22:31,520
IPFS and basically if it's not you can also get it on IP... Put it on IPFS because you can still


194
00:22:31,520 --> 00:22:40,480
fetch it from S3. But in this way you kind of improve the UX where you can kick off with loading


195
00:22:40,480 --> 00:22:48,240
the actual website and if resolving the data from IPFS takes a while that's okay but at least you


196
00:22:48,240 --> 00:22:56,000
can still kind of serve content until... Like you can serve untrusted content and kind of notify


197
00:22:56,000 --> 00:23:01,040
the user that in the background you're still trying to fetch everything from IPFS and actually


198
00:23:01,040 --> 00:23:05,600
verify whether the content is valid or not but in this way you're at least serving something


199
00:23:05,600 --> 00:23:14,560
and not letting the user wait for content. So in addition, obviously Portrait is built on top


200
00:23:14,560 --> 00:23:22,800
of Filecoin but at Portrait we also take the design philosophy of... Generally speaking you


201
00:23:22,800 --> 00:23:28,000
don't want to rely on a single provider and we're also aiming to do that with storage protocols as


202
00:23:28,000 --> 00:23:38,320
well. So IPFS truly empowers beyond Filecoin and IPFS empowers kind of to go broader and


203
00:23:39,360 --> 00:23:45,920
I think every storage protocol has its trade-offs and one of the solutions we're working on is


204
00:23:45,920 --> 00:23:54,080
actually looking at other protocols such as R-Reef where we are kind of attestating the data from


205
00:23:54,080 --> 00:24:01,520
IPFS onto R-Reef itself where we kind of... So you can take that from two perspectives where one


206
00:24:01,520 --> 00:24:08,000
you're using S3, the other one would be using another decentralized storage protocol and then


207
00:24:08,000 --> 00:24:14,400
you're actually stacking multiple storage protocols together and using GraphQL you can


208
00:24:14,400 --> 00:24:21,280
actually fetch the data. So these are kind of thinking... This way of thinking is kind of in a


209
00:24:21,280 --> 00:24:29,120
storage agnostic design where you have trade-offs on all levels where you kind of have to take that


210
00:24:29,120 --> 00:24:38,800
into account. So challenges to be solved, hopefully. The first one is really interesting. I'm not sure


211
00:24:38,800 --> 00:24:45,760
if someone is working on this already but we kind of have... Our main challenge today is kind of


212
00:24:45,760 --> 00:24:54,320
getting authentication use-off on kind of multiple instances of Portrait, whether that's a different


213
00:24:54,320 --> 00:25:00,880
IPFS gateway or a different protocol and that's mostly because authentication today kind of works


214
00:25:02,320 --> 00:25:09,440
in a similar fashion to location-based versus... Not necessarily versus but in a location-based


215
00:25:09,440 --> 00:25:14,640
way where authentication is mapped to a domain name and that's location-based. So what if we


216
00:25:14,640 --> 00:25:22,400
can kind of create a similar system in which we also can create content-based authentication


217
00:25:22,400 --> 00:25:30,880
and kind of derive a certain hash or a certain proof from a DAP and if that's all fine we can kind


218
00:25:30,880 --> 00:25:40,240
of base authentication on top of that. I'm sure there are some security issues there but that's


219
00:25:40,240 --> 00:25:45,680
something we're kind of... We hope that there will be upcoming solutions there that you can kind of


220
00:25:46,880 --> 00:25:53,040
move authentication away from a single entity governing authentication as well. So yeah.


221
00:25:54,720 --> 00:26:00,560
A second one and that's kind of more related to ENS today is in the beginning I spoke about how


222
00:26:00,560 --> 00:26:09,280
we kind of separate data from the renderer to kind of save space, storage space, and as a result you


223
00:26:09,280 --> 00:26:20,640
kind of need to add a query parameter to an IPFS hash to kind of load a user conditionally into


224
00:26:20,640 --> 00:26:28,320
the app. So above you can see what doesn't work within IPFS and that's app and adding the query


225
00:26:28,320 --> 00:26:37,360
parameter for a conditionally rendered portrait which is a certain user and below you can see


226
00:26:37,360 --> 00:26:43,040
what works which is just a simple IPFS hash and that means that today at Portrait we have to


227
00:26:43,040 --> 00:26:51,680
generate, store, and offload separate files to actually create individual portraits and it would


228
00:26:51,680 --> 00:27:00,640
be great if we can kind of load logic conditionally from a single source. So to round this off and


229
00:27:00,640 --> 00:27:07,360
something which I already covered, at Portrait we believe that decentralization is not mutually


230
00:27:07,360 --> 00:27:13,360
exclusive, rather it's a spectrum. It's not something to... It's not a light switch which


231
00:27:13,360 --> 00:27:18,480
is on or off and as an app developer and designer you kind of have to take a lot of things into


232
00:27:18,480 --> 00:27:28,160
account. Today we're at 10,000 users. If you'd like to be part of a few like 10,000... One,


233
00:27:28,160 --> 00:27:33,280
two, three... You can head over to Gilliam to ask for an invite code and he'll be happy to


234
00:27:33,280 --> 00:27:35,840
onboard you guys. Thank you very much.


235
00:27:49,520 --> 00:27:52,800
So can you go back to the last slide really quick? The one with the query parameters?


236
00:27:52,800 --> 00:27:57,440
So I'm just trying to understand what you're trying to gain out of this. So


237
00:27:58,080 --> 00:28:03,360
that query parameter, are you thinking that you want that to be passed into the page,


238
00:28:04,880 --> 00:28:11,520
into that wherever that CID lives? And are you trying to make a template there where you'd like


239
00:28:11,520 --> 00:28:15,840
to pass that information into it and then fill it out? What's the goal from that one?


240
00:28:15,840 --> 00:28:23,200
Yeah, so this is not something we're working on but we'd like to see that being solved. Let's say


241
00:28:23,200 --> 00:28:29,360
you run a DAP which takes in any arbitrary information conditionally through, let's say,


242
00:28:29,360 --> 00:28:35,280
a query parameter. Then if you'd like to do that today, that's simply impossible because that's


243
00:28:35,280 --> 00:28:42,640
not within the standards of ENS. So in order for us to actually generate portraits or map them to


244
00:28:42,640 --> 00:28:51,440
an ENS domain, we have to create or publish the actual website for every user, right? And that


245
00:28:51,440 --> 00:28:56,720
takes up unnecessary space. And with Filecoin, obviously, that's really cheap but there are


246
00:28:56,720 --> 00:29:03,120
other protocols out there where that gets quite expensive. So keeping stuff into a tiny JSON


247
00:29:03,760 --> 00:29:08,880
object would be very, like, I mean, in terms of scalability, that would be the best,


248
00:29:08,880 --> 00:29:14,640
even for Filecoin in the long term. Okay, thank you.


249
00:29:22,000 --> 00:29:28,720
But you mentioned that you split apart renders and data models. So couldn't you just


250
00:29:29,760 --> 00:29:34,080
request the renderer and then just give a CID to the data model?


251
00:29:34,080 --> 00:29:38,160
So that's what we're doing right now. But that's still, like, really hacky because then you still


252
00:29:38,160 --> 00:29:44,960
have to create individual CIDs for every single user. So in the worst case, like, if you're looking


253
00:29:44,960 --> 00:29:49,920
at the worst possible solution out there, you'll actually offload the data itself. But let's say


254
00:29:49,920 --> 00:29:55,840
you're writing a, like, you're using JS to kind of fetch the renderer from one place and fetch


255
00:29:56,560 --> 00:30:01,600
the data from another place, you'd still have to create a file which actually does that, right?


256
00:30:01,600 --> 00:30:07,200
You still have to create the logic and link that to an ENS domain to actually do that.


257
00:30:07,200 --> 00:30:13,840
Yeah, but I mean, like, the blocks of the renders could be, like, deduplicated in IPFS. And then you


258
00:30:13,840 --> 00:30:20,480
could just, like, people might have the same, like, similar CIDs. Well, they might have different


259
00:30:20,480 --> 00:30:26,000
CIDs for their renders, because maybe they have different combination of, like, components. But


260
00:30:26,000 --> 00:30:32,640
the base components would still be stored in IPFS as deduplicated blocks. And then the data models


261
00:30:32,640 --> 00:30:38,800
should change because they're specific to a user. So I don't know. It's just a thought.


262
00:30:38,800 --> 00:30:49,120
Yeah. So this solution just results into having to create one file, one app for every single user,


263
00:30:49,120 --> 00:30:56,320
and then conditionally load any data into it. And that's kind of the way we're looking at it,


264
00:30:56,320 --> 00:31:05,440
potentially. But in terms of storage capacity, so to speak, I think creating new CIDs for every


265
00:31:05,440 --> 00:31:14,320
user doesn't take up that much space. But generally speaking, if we could kind of approach it in this


266
00:31:14,320 --> 00:31:20,160
way, why even generate new CIDs for every single user, right? But that's just our take on it.


267
00:31:20,160 --> 00:31:27,680
I'm still very curious if someone else creates logic which still kind of generates a new CID


268
00:31:27,680 --> 00:31:31,440
for every individual, but does it in a more efficient way than we're doing today, because


269
00:31:31,440 --> 00:31:36,560
I'm sure there will be people out there who are able to create that process in a more, like,


270
00:31:37,200 --> 00:31:44,800
efficient way. So just within the context of Portrait, it'd be great. But I think also


271
00:31:44,800 --> 00:31:47,600
in the context of the entire ecosystem where you have a lot of dApps that


272
00:31:47,600 --> 00:32:02,400
likely will render stuff conditionally, a solution which is efficient would probably be great, yeah.
