1
00:00:00,000 --> 00:00:13,000
Hi, welcome to the workshop. This is the workshop for UCANs and you can learn how to do UCANs too.


2
00:00:13,000 --> 00:00:19,000
I'm Alan, I'm an engineer at DAG House and Irakli is just down there. He is an engineer also.


3
00:00:19,000 --> 00:00:23,000
If you need help during the workshop then we can try.


4
00:00:23,000 --> 00:00:32,000
I'm going to do a little bit of an intro and explainer before we get stuck into the workshop.


5
00:00:32,000 --> 00:00:39,000
Let's just start with the first thing that we should probably cover. What even is a UCAN?


6
00:00:39,000 --> 00:00:44,000
UCAN stands for user-controlled authorization networks.


7
00:00:44,000 --> 00:00:53,000
The key thing here is that they are user-controlled. UCANs are a way of doing authorization where the user is fully in control.


8
00:00:53,000 --> 00:01:01,000
They started out as an extension to JWT. You can think of them as a token that you pass somewhere to gain access to stuff.


9
00:01:01,000 --> 00:01:05,000
They are actually really different to a traditional API key or something.


10
00:01:05,000 --> 00:01:12,000
Everything that a user is allowed to do is captured directly in the token.


11
00:01:12,000 --> 00:01:19,000
There is no all-powerful authorization server. There is no authorization server at all.


12
00:01:19,000 --> 00:01:28,000
I'm just going to dive straight in. This is what the inside payload of a UCAN looks like.


13
00:01:28,000 --> 00:01:33,000
Let's have a quick look through the fields and I'll try and explain them as best I can.


14
00:01:33,000 --> 00:01:42,000
The issuer field is the identity of who issued or created the UCAN.


15
00:01:42,000 --> 00:01:46,000
You can think of this as who the UCAN is from.


16
00:01:46,000 --> 00:01:53,000
The audience field is the identity of who the UCAN is actually intended for.


17
00:01:53,000 --> 00:01:56,000
It's like the recipient of the delegation, the UCAN.


18
00:01:56,000 --> 00:02:05,000
Expiry is a time stamp that specifies when the UCAN stops being valid.


19
00:02:05,000 --> 00:02:10,000
The big important one is the attenuations.


20
00:02:10,000 --> 00:02:20,000
They are basically a list of capabilities that have been delegated to the audience, the person who is receiving the UCAN, by the issuer.


21
00:02:20,000 --> 00:02:23,000
Let's look into them a bit more.


22
00:02:23,000 --> 00:02:30,000
In this particular case, the capability called store slash add has been delegated.


23
00:02:30,000 --> 00:02:38,000
The with field here is the resource the delegated capability applies to.


24
00:02:38,000 --> 00:02:50,000
For example, in web3.storage, in our new APIs, when we delegate store add, the resource is typically like a space, what we call a space, a place where you store things.


25
00:02:50,000 --> 00:03:04,000
The proof field, which I haven't filled in here, but it's there to, it's a list of nested UCANs that prove the issuer is able to delegate those capabilities to the audience.


26
00:03:04,000 --> 00:03:13,000
And then the whole thing is like signed using the private key, so you can verify that it was sent by the issuer.


27
00:03:13,000 --> 00:03:16,000
That's it. There's not loads to it.


28
00:03:16,000 --> 00:03:24,000
You've seen the internals now, so you might be getting an idea of what is possible with UCAN.


29
00:03:24,000 --> 00:03:29,000
Let's just go through them, or enumerate them at least.


30
00:03:29,000 --> 00:03:44,000
You can delegate capabilities, specific capabilities like you saw in the example store add, but you can also delegate a wildcard, like all capabilities, or a wildcard underneath a namespace.


31
00:03:44,000 --> 00:03:50,000
So you could delegate store slash star to get all the store capabilities that are available, for instance.


32
00:03:50,000 --> 00:04:01,000
And then you can delegate multiple capabilities. You saw that the ATT field is an array, so you can delegate multiple things in a single UCAN, or just one.


33
00:04:01,000 --> 00:04:09,000
When you create the UCAN, you specify who the intended audience is, like who's going to be receiving that UCAN.


34
00:04:09,000 --> 00:04:18,000
And that means even if someone intercepts that UCAN, it's not really useful to them unless they have the private key of the person that it's intended for.


35
00:04:18,000 --> 00:04:26,000
So one field we didn't cover in the deep dive is caveats.


36
00:04:26,000 --> 00:04:43,000
Basically speaking, every delegated capability, you can optionally specify these caveats in this field called NB, and this can be used to narrow the scope of the delegated capability.


37
00:04:43,000 --> 00:05:07,000
So for this, as an example, if you had a capability to delete something from a collection, you might use the caveats field to restrict the content types of things you can delete, or maybe specify file name suffixes that you're allowed to delete, for instance.


38
00:05:07,000 --> 00:05:17,000
It has expiry, as you saw. The expiry field allows you to create really short-lived delegations for time-bounded operations.


39
00:05:17,000 --> 00:05:29,000
It also means that you can have really short-lived delegations or UCANs that you don't need to revoke because they only apply for a little amount of time and it doesn't matter so much.


40
00:05:29,000 --> 00:05:40,000
But what you can do also is specify this not before field, which means you can actually create UCANs that will become valid in the future, which is super cool.


41
00:05:40,000 --> 00:05:46,000
So that's what can you do with UCANs.


42
00:05:46,000 --> 00:06:02,000
And then the really big one of things that you can do with UCANs is you can use them for invocations, and the idea is that when you receive a delegation, you actually want to use that capability that it provides you with.


43
00:06:02,000 --> 00:06:10,000
So there's a whole spec for this, and it's being used in IPVM as well as other places. We're using it in Web Refuter Storage as well.


44
00:06:10,000 --> 00:06:22,000
And this is what we'll be working with primarily today in invocations. It's UCAN RPC, Remote Procedure Call with UCANs as authorizations.


45
00:06:22,000 --> 00:06:32,000
And so that segues nicely into the UCAN Working Group organization. UCAN Working Group is on GitHub. It's got a ton of resources there.


46
00:06:32,000 --> 00:06:42,000
A good place to ask questions, read up on the various UCAN specs, obviously the spec for UCAN themselves as well as the invocation spec can be found here.


47
00:06:42,000 --> 00:06:47,000
That's UCAN-WG on GitHub.


48
00:06:47,000 --> 00:06:54,000
We have an implementation of UCAN in IPLD. It's currently JS only.


49
00:06:54,000 --> 00:07:05,000
The Fission guys drew this cool avatar for us, mascot, I guess. It's kind of like the IPLD logo, but upside down. It's like a jellyfish.


50
00:07:05,000 --> 00:07:15,000
Anyway, so you might want to use this if you decide to build an IPFS-enabled UCAN application.


51
00:07:15,000 --> 00:07:22,000
There's also a bunch of other libraries for working with UCANs in other languages, which you can go to and use.


52
00:07:22,000 --> 00:07:33,000
But the most important library that we want to introduce to you today is this library which we call UCANto.


53
00:07:33,000 --> 00:07:40,000
It's a UCAN RPC library. It's written in JS. And it conforms to the UCAN invocation spec.


54
00:07:40,000 --> 00:07:49,000
And we use it in the new web3.storage APIs, which we're calling w3ups. It's currently in beta, but you can access it and use it right now.


55
00:07:49,000 --> 00:07:56,000
What we're going to do is use UCANto in the workshop today quite extensively.


56
00:07:56,000 --> 00:08:05,000
UCANto provides nice client and server abstractions, allowing you to perform invocations with delegated capabilities.


57
00:08:05,000 --> 00:08:10,000
On the server you can provide handler functions to deal with the requests as they come in.


58
00:08:10,000 --> 00:08:17,000
You don't have to worry about validating delegation chains and stuff like that, because the library does that all for you.


59
00:08:17,000 --> 00:08:22,000
It's good. And there's a bunch of other cool tooling which I have not mentioned here.


60
00:08:22,000 --> 00:08:27,000
UCANto! If you remember nothing else, UCANto is the thing.


61
00:08:27,000 --> 00:08:33,000
So, workshop. Are we ready to do a workshop?


62
00:08:33,000 --> 00:08:37,000
A couple of people at least.


63
00:08:37,000 --> 00:08:44,000
It's an observable. We also have a leaderboard. I'm going to pull up the leaderboard as well.


64
00:08:44,000 --> 00:08:47,000
It's a competition. It's a game. A competition.


65
00:08:47,000 --> 00:09:01,000
We're going to play with the observable to create delegations, enter the competition, and you have the chance to win chocolate gold.


66
00:09:01,000 --> 00:09:16,000
If you are top of the leaderboard at the end of the workshop, you will win a chocolate coin to signify your ability to do things well.


67
00:09:16,000 --> 00:09:21,000
There's a prize for the participant that gets the most points.


68
00:09:21,000 --> 00:09:26,000
We have more than one of these just in case more than one person gets the same amount of points.


69
00:09:26,000 --> 00:09:32,000
Right now, it's time for you to open up your laptops, go to this URL.


70
00:09:32,000 --> 00:09:36,000
You might need to register for observable, I guess.


71
00:09:36,000 --> 00:09:39,000
You don't have to register.


72
00:09:39,000 --> 00:09:43,000
It might be an idea to fork the observable. I don't think you need to do that either.


73
00:09:43,000 --> 00:09:45,000
If you want to keep it, I think you need to fork it.


74
00:09:45,000 --> 00:09:56,000
And the observable basically has the instructions for the workshop, what you need to do to win, I guess.


75
00:09:56,000 --> 00:10:10,000
Essentially, you follow the instructions and you will make invocations to our Yucanto server and you will gain points for doing the things in the right way.


76
00:10:10,000 --> 00:10:15,000
You will see yourself on the leaderboard. I will pull it up now.


77
00:10:15,000 --> 00:10:20,000
If you have questions or problems, then just grab me or Akeli.


78
00:10:20,000 --> 00:10:25,000
We will be around. Pull it up. See how far you get.


79
00:10:25,000 --> 00:10:30,000
Go wild!


80
00:10:30,000 --> 00:10:34,000
When you open up the URL, it should look something like this.


81
00:10:34,000 --> 00:10:37,000
We have got agent key pair.


82
00:10:37,000 --> 00:10:40,000
The website is going to be your agent in this workshop.


83
00:10:40,000 --> 00:10:43,000
You need the key pair. We generated one for you here.


84
00:10:43,000 --> 00:10:49,000
Your identity is this DID that gets listed here.


85
00:10:49,000 --> 00:10:55,000
Then we have got the provider address. This is like the server side of things.


86
00:10:55,000 --> 00:10:59,000
This is just connecting your agent to the server.


87
00:10:59,000 --> 00:11:09,000
Then we can get the connection to tell us exactly what kind of RPC endpoints are available.


88
00:11:09,000 --> 00:11:16,000
It will show you that in the IPLD schema syntax.


89
00:11:16,000 --> 00:11:19,000
You can see what you are able to do.


90
00:11:19,000 --> 00:11:21,000
You don't need this just yet.


91
00:11:21,000 --> 00:11:31,000
Once you get to here, entering the challenge should be as simple as heading on down to this button that says enter workshop.


92
00:11:31,000 --> 00:11:40,000
If you click on enter workshop, you should see a DID end up in this list just down below.


93
00:11:40,000 --> 00:11:42,000
Which is your DID.


94
00:11:42,000 --> 00:11:48,000
You just submitted a request or invocation to the server to say I am here.


95
00:11:48,000 --> 00:11:51,000
This is my public key.


96
00:11:51,000 --> 00:11:53,000
We have got some people in there.


97
00:11:53,000 --> 00:11:55,000
We can see their score as well.


98
00:11:55,000 --> 00:12:05,000
We also have...


99
00:12:05,000 --> 00:12:07,000
This is the current leaderboard.


100
00:12:07,000 --> 00:12:12,000
There are some people who have entered.


101
00:12:12,000 --> 00:12:14,000
I will leave that up.


102
00:12:14,000 --> 00:12:21,000
Once you have entered the workshop, continue on the adventure.


103
00:12:21,000 --> 00:12:26,000
Give us a shout if you have problems.


104
00:12:26,000 --> 00:12:32,000
In the observable thing, is it easy to see the imports?


105
00:12:32,000 --> 00:12:36,000
What code is being used?


106
00:12:36,000 --> 00:12:38,000
Just wondering.


107
00:12:38,000 --> 00:12:44,000
Down there.


108
00:12:44,000 --> 00:12:46,000
Here they are.


109
00:12:46,000 --> 00:12:50,000
Cool.


110
00:12:50,000 --> 00:12:52,000
That's nice.


111
00:12:52,000 --> 00:12:54,000
I just wanted to see what is being used.


112
00:12:54,000 --> 00:12:56,000
Cool.


113
00:12:56,000 --> 00:12:58,000
That's an important point.


114
00:12:58,000 --> 00:13:07,000
In observable, it is this reactive programming thing where you have variables and things that have been defined.


115
00:13:07,000 --> 00:13:13,000
If they get updated, any code referencing that same variable will get rerun.


116
00:13:13,000 --> 00:13:18,000
It is constantly running and rerunning whenever you make changes.


117
00:13:18,000 --> 00:13:20,000
Everything is like a block.


118
00:13:20,000 --> 00:13:23,000
On the left-hand side, there are arrows.


119
00:13:23,000 --> 00:13:26,000
Sometimes we have hidden most of the ones you don't need to see.


120
00:13:26,000 --> 00:13:30,000
But pinned things open where you do need to see it.


121
00:13:30,000 --> 00:13:33,000
We could have messed up.


122
00:13:33,000 --> 00:13:38,000
There are arrows on the left-hand side where you can drop down and see anything that is hidden away.


123
00:13:38,000 --> 00:13:40,000
Be on the lookout for that.


124
00:13:40,000 --> 00:13:43,000
Largely, it should be as you need it.


125
00:13:43,000 --> 00:13:51,000
As you need to work with it, the code will be there for you to edit and run.


126
00:13:51,000 --> 00:13:58,000
Once you have made changes, there is a blue play icon in the top right of each block.


127
00:13:58,000 --> 00:14:04,000
You should press to get those changes, to save those changes for that block.


128
00:14:04,000 --> 00:14:12,000
Oftentimes, when there is a button, if you have made changes to the thing, press the blue thing, then press the button.


129
00:14:12,000 --> 00:14:16,000
That is something we have run into a few times.


130
00:14:16,000 --> 00:14:18,000
I see we have some names up there now.


131
00:14:18,000 --> 00:14:20,000
Which is great.


132
00:14:20,000 --> 00:14:25,000
The points you get, it is also like a time-based thing.


133
00:14:25,000 --> 00:14:30,000
If you are the first person to do a particular task, you will get more points.


134
00:14:30,000 --> 00:14:37,000
When you come to delegating to other people, it is a choose your own adventure.


135
00:14:37,000 --> 00:14:42,000
You either get to export a file with that delegation in it.


136
00:14:42,000 --> 00:14:50,000
You have to somehow send that to someone out of band over IPFS or something.


137
00:14:50,000 --> 00:15:02,000
Or you can use this special thing, which we created, where you can actually stash that delegation in the server for the other person to then claim.


138
00:15:02,000 --> 00:15:09,000
Just be aware, when you are delegating to other people, there are these two options for doing things.


139
00:15:09,000 --> 00:15:11,000
You will delegate to them.


140
00:15:11,000 --> 00:15:14,000
They need to somehow claim it or receive it.


141
00:15:14,000 --> 00:15:20,000
There is a big or in bold, but it is maybe not big enough.


142
00:15:20,000 --> 00:15:23,000
Or is just pin over pin.


143
00:15:23,000 --> 00:15:27,000
The capabilities are set up so only that person can claim it.


144
00:15:27,000 --> 00:15:35,000
Incidentally, the access claim and access delegate capabilities are also some things that Web3 Storage implements.


145
00:15:35,000 --> 00:15:37,000
We have a spec for it.


146
00:15:37,000 --> 00:15:40,000
The idea is that it is pretty general.


147
00:15:40,000 --> 00:15:45,000
When you delegate to someone, only the audience can claim it.


148
00:15:45,000 --> 00:15:49,000
Or we will give it only to the audience.


149
00:15:49,000 --> 00:15:59,000
But even if somebody gets to have it, they won't have a key, so there is very little interest to doing that.


150
00:15:59,000 --> 00:16:06,000
The person who has the capability, the person who controls that audience, just shows up and says, do you have any messages for me?


151
00:16:06,000 --> 00:16:09,000
Or do they have to say, I am trying to claim a specific thing?


152
00:16:09,000 --> 00:16:16,000
No, you just say, you just invoke access claim with your DID.


153
00:16:16,000 --> 00:16:20,000
And anything that had been delegated to the DID, you will get it.


154
00:16:20,000 --> 00:16:24,000
I think we frame it 10 at a time in case there are too many.


155
00:16:24,000 --> 00:16:25,000
But then you can do it.


156
00:16:25,000 --> 00:16:28,000
Also, once you claim it, we will remove it from the server.


157
00:16:28,000 --> 00:16:30,000
So it is not going to stay there.


158
00:16:30,000 --> 00:16:34,000
Yeah, well, I coded it last night, so maybe it crashed.


159
00:16:34,000 --> 00:16:38,000
I am sorry.


160
00:16:38,000 --> 00:16:40,000
And now everyone gets to try it again.


161
00:16:40,000 --> 00:16:42,000
And maybe a few.


162
00:16:42,000 --> 00:16:44,000
Yeah, I am sorry.


163
00:16:44,000 --> 00:16:47,000
We also have a server that you can run yourself.


164
00:16:47,000 --> 00:16:52,000
And in observables, there is a switch to use your local host version if you want to do that.


165
00:16:52,000 --> 00:16:55,000
And there is also a few things you can do.


166
00:16:55,000 --> 00:17:00,000
You can write loops and make a disco background on your avatar if you want to.


167
00:17:00,000 --> 00:17:02,000
Yeah.


168
00:17:02,000 --> 00:17:04,000
And there are a bunch of things you can do.


169
00:17:04,000 --> 00:17:10,000
Like you can abuse the colors and we don't escape it.


170
00:17:10,000 --> 00:17:13,000
So you can mess with HTML if you want to.


171
00:17:13,000 --> 00:17:18,000
So, yeah, if you are looking for a challenge, that could be fun.


172
00:17:18,000 --> 00:17:24,000
One thing that you should maybe watch out for is that any delegation you make can expire.


173
00:17:24,000 --> 00:17:32,000
So if you don't use it quite quickly, you might find you are not able to use it.


174
00:17:32,000 --> 00:17:35,000
There is another fun exercise you can do if you want to.


175
00:17:35,000 --> 00:17:40,000
So when you define the schemas or when you do the delegations, there is a type union.


176
00:17:40,000 --> 00:17:48,000
So you can say, well, you can change my background color to yellow or red, but only those two.


177
00:17:48,000 --> 00:17:50,000
And delegate that.


178
00:17:50,000 --> 00:17:51,000
So be creative.


179
00:17:51,000 --> 00:17:54,000
Don't just do what observable does.


180
00:17:54,000 --> 00:17:57,000
The Ucons that you delegate, I think they expire really quickly.


181
00:17:57,000 --> 00:18:00,000
I think it is 30 seconds or so.


182
00:18:00,000 --> 00:18:05,000
But then you can set expiration when you do that to set to whatever.


183
00:18:05,000 --> 00:18:07,000
So you can do that here.


184
00:18:07,000 --> 00:18:09,000
Although it is better to have short-lived.


185
00:18:09,000 --> 00:18:12,000
So that's why it is default.


186
00:18:12,000 --> 00:18:17,000
If you do the longer delegation chains, you will get more points.


187
00:18:17,000 --> 00:18:23,000
Like you can delegate to someone and they can redelegate to someone else, et cetera.


188
00:18:23,000 --> 00:18:24,000
All right.


189
00:18:24,000 --> 00:18:26,000
We are running out of time now.


190
00:18:26,000 --> 00:18:30,000
Let's do should we call it quits?


191
00:18:30,000 --> 00:18:34,000
Whoever is at the top.


192
00:18:34,000 --> 00:18:39,000
It is okay.


193
00:18:39,000 --> 00:18:40,000
All right.


194
00:18:40,000 --> 00:18:43,000
So burrito.


195
00:18:43,000 --> 00:18:44,000
Am I going to throw this?


196
00:18:44,000 --> 00:18:46,000
Is that a good idea?


197
00:18:46,000 --> 00:18:48,000
Ready?


198
00:18:48,000 --> 00:18:52,000
Yes.


199
00:18:52,000 --> 00:18:58,000
Second is ICID asset.


200
00:18:58,000 --> 00:18:59,000
Yes.


201
00:18:59,000 --> 00:19:00,000
Good job.


202
00:19:00,000 --> 00:19:01,000
Are you ready for this?


203
00:19:01,000 --> 00:19:04,000
All right.


204
00:19:04,000 --> 00:19:05,000
Nice.


205
00:19:05,000 --> 00:19:07,000
Third place is free can.


206
00:19:07,000 --> 00:19:08,000
Nice.


207
00:19:08,000 --> 00:19:11,000
All right.


208
00:19:11,000 --> 00:19:13,000
Yes.


209
00:19:13,000 --> 00:19:16,000
I have got loads more for everyone else.


210
00:19:16,000 --> 00:19:19,000
The smaller chocolates.


211
00:19:19,000 --> 00:19:26,000
If you are on the leaderboard and you feel you deserve a chocolate, come and grab one.


212
00:19:26,000 --> 00:19:30,000
Otherwise, feel free to keep, we have got ten minutes left.


213
00:19:30,000 --> 00:19:32,000
Feel free to keep hacking.


214
00:19:32,000 --> 00:19:34,000
You can keep hacking on this afterwards as well.


215
00:19:34,000 --> 00:19:37,000
We will try to fix the server at some point.


216
00:19:37,000 --> 00:19:38,000
Sorry about that.


217
00:19:38,000 --> 00:19:41,000
But you know, some of it worked.


218
00:19:41,000 --> 00:19:42,000
Yes.


219
00:19:42,000 --> 00:19:45,000
Well done, everyone who came and did a thing.


220
00:19:45,000 --> 00:19:46,000
You all did really well.


221
00:19:46,000 --> 00:19:48,000
A lot better than I thought you would.


222
00:19:48,000 --> 00:19:49,000
Thanks.


223
00:19:49,000 --> 00:20:18,000
Thank you.
