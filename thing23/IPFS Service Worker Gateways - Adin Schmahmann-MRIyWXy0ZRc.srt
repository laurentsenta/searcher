1
00:00:00,000 --> 00:00:10,640
Hi everybody, my name is Adeen, I work at Protocol Labs, I've been working on IPFS


2
00:00:10,640 --> 00:00:16,400
for 4 and a half years or something now, and excited to be here with you all.


3
00:00:16,400 --> 00:00:23,320
And we're going to talk a little bit about how to put IPFS gateways and sort of put them


4
00:00:23,320 --> 00:00:29,720
into the browsers, but more on the web platform side, like service workers and fetch API and


5
00:00:29,720 --> 00:00:35,520
not like C++ code that lives in the rendering engine kind of stuff.


6
00:00:35,520 --> 00:00:40,320
So gateways, thankfully, a number of folks have talked about this and seen this interact


7
00:00:40,320 --> 00:00:43,680
with it, so it needs less explanation.


8
00:00:43,680 --> 00:00:50,880
But IPFS, we move around content addressable data and graphs, and people would like to


9
00:00:50,880 --> 00:00:55,320
see that, you know, I have a UnixFS graph of a bunch of bytes, I'd like to render my


10
00:00:55,320 --> 00:01:03,320
Koala JPEG, please, and do it in my browser, and gateways sort of let you do this.


11
00:01:03,320 --> 00:01:09,320
Gateways have a few different jobs, somewhat simplified, it's I would like to find this


12
00:01:09,320 --> 00:01:14,520
stuff, I would like to find who has what I want, get it from them, verify it's correct,


13
00:01:14,520 --> 00:01:21,760
and then render it as my JPEG or website or video or what have you.


14
00:01:21,760 --> 00:01:27,040
Processing is things like content and peer routing, data transfer, fetches for data transfer,


15
00:01:27,040 --> 00:01:32,120
and then verifying and rendering is basically the IPLD and processing work.


16
00:01:32,120 --> 00:01:36,360
The things in blue are the things that some people associate with as like, oh, these are


17
00:01:36,360 --> 00:01:39,960
the IPFS things, because these are what they see running on big public gateways that are


18
00:01:39,960 --> 00:01:48,640
run by protocol labs or CloudFlare, but these other things are all valid parts of the IPFS


19
00:01:48,640 --> 00:01:49,880
ecosystem as well.


20
00:01:49,880 --> 00:01:55,880
You heard Will talk about how maybe we add GraphSync in on the data transfer side, but


21
00:01:55,880 --> 00:02:01,240
there are so many more things that are out there.


22
00:02:01,240 --> 00:02:08,360
And as part of this, the way that many of us interact with these gateways is via public


23
00:02:08,360 --> 00:02:16,040
HTTP gateways, things that are run by, say, protocol labs or CloudFlare.


24
00:02:16,040 --> 00:02:18,160
And these sort of have downsides.


25
00:02:18,160 --> 00:02:23,160
So there are resiliency pitfalls associated with this.


26
00:02:23,160 --> 00:02:26,320
The ones that most people think of when they're like, oh, there are resiliency problems with


27
00:02:26,320 --> 00:02:32,160
the fact that dweb.link is run by a company is operational ones.


28
00:02:32,160 --> 00:02:40,360
Someone messes up a DNS config or a browser blocks a DNS name or a machine overheats or


29
00:02:40,360 --> 00:02:46,760
somebody accidentally turns off IPv4 on the machines or the NGINX caching is wrong or


30
00:02:46,760 --> 00:02:51,280
none of these have happened in real life, I promise.


31
00:02:51,280 --> 00:02:55,080
Or someone decides that running one of these public services is expensive and they decide


32
00:02:55,080 --> 00:02:57,840
to shut down.


33
00:02:57,840 --> 00:03:02,880
But there's another one that happens more under the covers, which is ecosystem resiliency


34
00:03:02,880 --> 00:03:08,160
issues, which is needing to get buy-in to test new things.


35
00:03:08,160 --> 00:03:12,360
So if you go back here and you're like, I would like to support BitTorrent and mainline


36
00:03:12,360 --> 00:03:17,720
DHT or I would like to support CarMirror or BAU for like three blocks or MDN for like


37
00:03:17,720 --> 00:03:21,160
two blocks, for SHA-2 blocks or WinFS.


38
00:03:21,160 --> 00:03:23,880
Like how do I do that right now?


39
00:03:23,880 --> 00:03:29,200
I can either run a gateway myself, but those are kind of expensive and like, didn't I just


40
00:03:29,200 --> 00:03:31,920
feel like I wanted to work on WinFS and not like run a gateway?


41
00:03:31,920 --> 00:03:35,960
That wasn't really what I wanted to do.


42
00:03:35,960 --> 00:03:39,960
Or maybe I can go ask protocol labs and CloudFlare if like they feel like doing this, but they


43
00:03:39,960 --> 00:03:43,000
may have different priorities than I do or work at different timescales than I do.


44
00:03:43,000 --> 00:03:46,380
And that feels pretty bad.


45
00:03:46,380 --> 00:03:51,920
So idea, let's try and move more of the gateway work to the client side so that the set of


46
00:03:51,920 --> 00:03:56,960
things I'm depending on the people who are running services to do is smaller and less


47
00:03:56,960 --> 00:03:59,720
likely to get in my way.


48
00:03:59,720 --> 00:04:03,280
And less expensive for them too.


49
00:04:03,280 --> 00:04:09,720
I could like do this by running a Kubo node locally or embedding it in my browser or something,


50
00:04:09,720 --> 00:04:11,280
like Brave does.


51
00:04:11,280 --> 00:04:15,960
And then sure, if I want to add, you know, Graph Sync support, I'll just, I'll fork my


52
00:04:15,960 --> 00:04:19,000
Kubo, I'll add the Graph Sync thing or a Car Mirror.


53
00:04:19,000 --> 00:04:22,640
Like I'll add my Car Mirror support with the plugin and be like, hey, look, it does Car


54
00:04:22,640 --> 00:04:23,640
Mirror.


55
00:04:23,640 --> 00:04:25,320
And then I'll deploy it locally.


56
00:04:25,320 --> 00:04:30,840
But that's kind of unfortunate because I now have to deploy this binary to everybody.


57
00:04:30,840 --> 00:04:34,920
And I hear this web platform thing has remote code execution on like millions of, you know,


58
00:04:34,920 --> 00:04:37,680
billions of devices across the world and everyone's cool with it.


59
00:04:37,680 --> 00:04:40,560
Why don't we use that?


60
00:04:40,560 --> 00:04:45,040
And let them, and let the browser do the work for us.


61
00:04:45,040 --> 00:04:50,340
And this involves letting us, you know, okay, so let's try and do this in a browser.


62
00:04:50,340 --> 00:04:53,800
Let's choose what we want to delegate and what we want to do ourselves.


63
00:04:53,800 --> 00:04:58,920
So we have find, we have fetch, we have verify and render.


64
00:04:58,920 --> 00:05:03,040
We have APIs that we can use to sort of cross these boundaries.


65
00:05:03,040 --> 00:05:08,680
APIs that will do, you know, everything for us, fetch, you know, find, fetch, verify and


66
00:05:08,680 --> 00:05:16,160
render, which is, you know, the trusted gateway API, you know, IPFS.io, IPFS CID.


67
00:05:16,160 --> 00:05:20,360
There's the trustless gateway API, which Will mentioned, where you have things like ask


68
00:05:20,360 --> 00:05:22,440
for a car file.


69
00:05:22,440 --> 00:05:29,880
And we have a routing API where you say, who has the stuff?


70
00:05:29,880 --> 00:05:33,760
The more of these things you need to do, the more expensive it gets.


71
00:05:33,760 --> 00:05:37,840
So find is relatively cheap.


72
00:05:37,840 --> 00:05:42,600
It's, you know, you sort of do, you do a database lookup, say, I'm going to do a DHT, I'll do


73
00:05:42,600 --> 00:05:48,120
a DHT lookup, I'll query an IP and I node, return some result.


74
00:05:48,120 --> 00:05:49,480
Fetch is pretty expensive.


75
00:05:49,480 --> 00:05:53,800
You have to proxy all of the bandwidth of everybody who feels like using IPFS stuff.


76
00:05:53,800 --> 00:05:55,900
So that sounds pretty expensive.


77
00:05:55,900 --> 00:06:00,400
And then verification is, so I did the finding and then I did the fetching and then I had


78
00:06:00,400 --> 00:06:02,560
to do the processing for all of the graph data.


79
00:06:02,560 --> 00:06:08,280
And that adds even additional cost.


80
00:06:08,280 --> 00:06:10,280
And so there's, there's a spectrum here.


81
00:06:10,280 --> 00:06:17,880
So if you use the, the trusted, you know, Raya version of this, the client does nothing


82
00:06:17,880 --> 00:06:19,800
IPFS related.


83
00:06:19,800 --> 00:06:24,960
It uses CID.contact to find it, Saturn to fetch it, Bifrost gateway to render it.


84
00:06:24,960 --> 00:06:27,920
And there you go.


85
00:06:27,920 --> 00:06:32,840
Little Bear Labs' Chromium racing gateway, they do rendering and then ask someone else


86
00:06:32,840 --> 00:06:33,920
to do the rest of the work.


87
00:06:33,920 --> 00:06:38,840
I think Alex's talk after me will do something similar.


88
00:06:38,840 --> 00:06:44,080
Brave embeds a Kubo node and says, we're doing everything, get out of my way.


89
00:06:44,080 --> 00:06:46,800
And I'm like, hey, I feel like there's a missing one.


90
00:06:46,800 --> 00:06:51,560
What if we just, what if we let somebody else do find for us and we just did fetch and render,


91
00:06:51,560 --> 00:06:58,600
which are the most expensive parts of the process?


92
00:06:58,600 --> 00:07:00,120
So why now?


93
00:07:00,120 --> 00:07:01,360
Is this like a new idea?


94
00:07:01,360 --> 00:07:02,760
Has nobody had this idea before?


95
00:07:02,760 --> 00:07:08,040
Like what's going on?


96
00:07:08,040 --> 00:07:11,440
Some of this is like, there's been a lot of growth in the last year and people pushing


97
00:07:11,440 --> 00:07:16,680
on new protocols in various ways who are getting held back by this more, right?


98
00:07:16,680 --> 00:07:22,520
As we get more growth, then becomes more pressure on the controlled and expensive endpoints


99
00:07:22,520 --> 00:07:27,480
that say support my thing, which is harder for them, right?


100
00:07:27,480 --> 00:07:31,280
And sort of stifles the growth.


101
00:07:31,280 --> 00:07:37,560
There are bear market conditions, give you another look at like expensive infra, that's


102
00:07:37,560 --> 00:07:39,800
public for everybody.


103
00:07:39,800 --> 00:07:43,800
Maybe not optimal.


104
00:07:43,800 --> 00:07:50,640
The IPFS ecosystem and the web platform have improved to make this easier for us now.


105
00:07:50,640 --> 00:07:56,400
We have services like Elastic IPFS that have web socket support, secure web socket support.


106
00:07:56,400 --> 00:08:03,440
We have a trustless gateway API that allows for fetching blocks if I just slap a TLS cert


107
00:08:03,440 --> 00:08:05,220
in front.


108
00:08:05,220 --> 00:08:11,720
If I don't have a CA signed certificate, I now have web transport, which is usable within


109
00:08:11,720 --> 00:08:18,220
lots of browser contexts, unlike WebRTC, which is not and has lots of won't fixes sitting


110
00:08:18,220 --> 00:08:23,160
around in the Chromium and Firefox code bases.


111
00:08:23,160 --> 00:08:28,760
But libpdp is adding support for WebRTC, too, which helps us out.


112
00:08:28,760 --> 00:08:32,960
And we now have APIs to ask somebody else to do the fetching, whereas before that was


113
00:08:32,960 --> 00:08:38,540
not, we'll say they existed, but not in a way that was very useful unless you had exactly


114
00:08:38,540 --> 00:08:41,000
one thing you were trying to do.


115
00:08:41,000 --> 00:08:46,240
Not very useful if you wanted to experiment or grow the set of data transports you were


116
00:08:46,240 --> 00:08:53,760
supporting, like having HTTP data transports not previously supported.


117
00:08:53,760 --> 00:08:57,240
So let's take a look at some demos.


118
00:08:57,240 --> 00:09:02,800
See what we got.


119
00:09:02,800 --> 00:09:03,800
Let's start with...


120
00:09:03,800 --> 00:09:04,800
Yeah, let's take this guy.


121
00:09:04,800 --> 00:09:10,960
I could have two browsers because of the service worker.


122
00:09:10,960 --> 00:09:13,960
You just want to make everything a little cleaner.


123
00:09:13,960 --> 00:09:24,600
I'll clear everything out so everyone knows I'm not cheating.


124
00:09:24,600 --> 00:09:25,600
And away we go.


125
00:09:25,600 --> 00:09:27,640
You got to register your service worker the first time.


126
00:09:27,640 --> 00:09:30,480
That's sad, but not necessarily a game-ender.


127
00:09:30,480 --> 00:09:31,480
All right.


128
00:09:31,480 --> 00:09:36,040
And away we go.


129
00:09:36,040 --> 00:09:40,920
And we asked CID.contact, hey, anyone know where this CID is?


130
00:09:40,920 --> 00:09:44,040
They said, yep, some of these folks have it.


131
00:09:44,040 --> 00:09:46,640
We said, okay, which ones speak WebTransport and WebSockets?


132
00:09:46,640 --> 00:09:48,760
Okay, these ones do.


133
00:09:48,760 --> 00:09:56,920
Connected to them with the B2B and use BitSwap, fetch data, render data, got a video.


134
00:09:56,920 --> 00:10:02,280
You know, we can do more of this.


135
00:10:02,280 --> 00:10:03,280
Here's the docs website.


136
00:10:03,280 --> 00:10:12,000
Let's see if the demo got a smile.


137
00:10:12,000 --> 00:10:16,480
Oh, not so smiley today.


138
00:10:16,480 --> 00:10:24,000
Of course, five minutes before I started talking, everything was fine, but you never know.


139
00:10:24,000 --> 00:10:29,040
Let's give it one more shot.


140
00:10:29,040 --> 00:10:30,360
Kick everything and start again.


141
00:10:30,360 --> 00:10:31,360
All right.


142
00:10:31,360 --> 00:10:47,520
I hear turning it off and on again always works.


143
00:10:47,520 --> 00:10:48,520
Demo gods.


144
00:10:48,520 --> 00:10:49,520
All right.


145
00:10:49,520 --> 00:10:55,320
And something slightly different.


146
00:10:55,320 --> 00:10:58,880
Okay.


147
00:10:58,880 --> 00:11:03,600
And you know, we can do directory listings and get our JPEGs and so on.


148
00:11:03,600 --> 00:11:07,520
And in the interest of time, I'll skip the website one for now.


149
00:11:07,520 --> 00:11:11,200
But let's say you were like, okay, this is cool.


150
00:11:11,200 --> 00:11:14,920
I've heard of BitSwap and fetching data and whatever.


151
00:11:14,920 --> 00:11:18,680
Have you heard of, like, my cool new protocol?


152
00:11:18,680 --> 00:11:23,720
And this guy Marco shows up and says I would like to please support HTTP fetching of data.


153
00:11:23,720 --> 00:11:29,680
And I would also like to support fetching of HTTP data over libP2P, over web transport,


154
00:11:29,680 --> 00:11:34,280
because I think HTTP is pretty cool and I would like it to work even if you don't have


155
00:11:34,280 --> 00:11:35,280
a certificate.


156
00:11:35,280 --> 00:11:40,200
But I've only got, like, three days to do this.


157
00:11:40,200 --> 00:11:43,880
And the only way I can figure out how to do this is to, like, hack it really deep into


158
00:11:43,880 --> 00:11:48,000
JS BitSwap and see if that kind of makes it work.


159
00:11:48,000 --> 00:11:52,360
Could you please merge this into your upstream code base and deploy it to all your users?


160
00:11:52,360 --> 00:11:54,680
And maybe you're like, yeah, cool, let's do it.


161
00:11:54,680 --> 00:11:55,680
I trust you.


162
00:11:55,680 --> 00:11:57,280
You're awesome.


163
00:11:57,280 --> 00:12:03,480
And maybe you're like, no?


164
00:12:03,480 --> 00:12:09,480
But because this is, you know, sort of like the browser world we're operating in, you


165
00:12:09,480 --> 00:12:15,560
can say instead you don't have to run your own gateway to proxy everyone's traffic for


166
00:12:15,560 --> 00:12:16,560
you.


167
00:12:16,560 --> 00:12:19,320
You can just basically deploy a website.


168
00:12:19,320 --> 00:12:21,480
In fact, you don't even need to deploy it on Fleek or anything.


169
00:12:21,480 --> 00:12:28,800
You can just deploy it on, like, as a CID, load it through dweb.link, and then, like,


170
00:12:28,800 --> 00:12:31,840
load your thing.


171
00:12:31,840 --> 00:12:38,120
And it will go and fetch I guess I should close the tab so you can see what happens.


172
00:12:38,120 --> 00:12:47,120
But dweb.link will load, like, the service worker loader thingy, which will then go and


173
00:12:47,120 --> 00:12:48,200
load it, right?


174
00:12:48,200 --> 00:12:53,440
So it's like Marco has been able to deploy his loader without asking anyone, without


175
00:12:53,440 --> 00:12:54,440
needing to do much.


176
00:12:54,440 --> 00:12:57,680
He could have used it with, like, he could have deployed it with, like, IPFS, he could


177
00:12:57,680 --> 00:13:03,560
have put it on GitHub pages or whatever, and he would be able to do it.


178
00:13:03,560 --> 00:13:06,920
I could do this, and I could say, oh, you know, something broke, Marco, that's sad.


179
00:13:06,920 --> 00:13:10,040
Good thing I didn't deploy it on my production system.


180
00:13:10,040 --> 00:13:12,760
Or maybe it all works, right?


181
00:13:12,760 --> 00:13:15,040
And that experimentation is fine.


182
00:13:15,040 --> 00:13:20,160
It's like part of it's like a healthier version of how to do this, because it doesn't require


183
00:13:20,160 --> 00:13:23,280
spinning up humongous amounts of infrastructure to give this a shot.


184
00:13:23,280 --> 00:13:26,360
Yeah, demo guys decided not to smile today.


185
00:13:26,360 --> 00:13:27,360
That's great.


186
00:13:27,360 --> 00:13:29,200
Let's go back here.


187
00:13:29,200 --> 00:13:31,200
We can come back later.


188
00:13:31,200 --> 00:13:35,880
All right.


189
00:13:35,880 --> 00:13:39,520
So sort of where we're at.


190
00:13:39,520 --> 00:13:45,880
So we delegated out find, we did fetch, and we did verify, and we did render.


191
00:13:45,880 --> 00:13:47,720
We have tools to help websites integrate.


192
00:13:47,720 --> 00:13:53,200
So you can use either the fetch API or you can use service workers.


193
00:13:53,200 --> 00:13:58,480
As you have seen, service workers have rough edges.


194
00:13:58,480 --> 00:14:02,040
And this means that when you integrate, you can do something like closer to, say, what


195
00:14:02,040 --> 00:14:07,880
WebTorrent does, which is give you JavaScript hooks to deploy your code that fetches and


196
00:14:07,880 --> 00:14:09,600
renders your data for you.


197
00:14:09,600 --> 00:14:13,160
Or you can use the magic with the service workers.


198
00:14:13,160 --> 00:14:17,300
And depending on, you know, your inclination, you might decide it is easier for me to take


199
00:14:17,300 --> 00:14:22,480
my existing website and use the service workers and make the magic work.


200
00:14:22,480 --> 00:14:27,400
Or it is easier for me to, like, use the fetch API and have more control.


201
00:14:27,400 --> 00:14:28,400
Both work.


202
00:14:28,400 --> 00:14:32,080
You can do the same code with two different wrappers on top.


203
00:14:32,080 --> 00:14:36,320
That sort of let you do this.


204
00:14:36,320 --> 00:14:41,360
It's easier to fork and add a support for a new protocol.


205
00:14:41,360 --> 00:14:42,840
Or a new data structure.


206
00:14:42,840 --> 00:14:47,840
Like if you wanted to support WinFS, you could do this without needing to redeploy everything.


207
00:14:47,840 --> 00:14:50,280
And it's certainly the least expensive gateway you can run, because all you have to do is


208
00:14:50,280 --> 00:14:54,280
like deploy some JavaScript to somebody's web page, and then they can, you know, cache


209
00:14:54,280 --> 00:14:55,820
that and whatever.


210
00:14:55,820 --> 00:14:59,440
And maybe let's not proxy all of the data, which is by far the most expensive part of


211
00:14:59,440 --> 00:15:03,400
this process.


212
00:15:03,400 --> 00:15:04,720
So where do we go from here?


213
00:15:04,720 --> 00:15:09,240
This is put together pretty quickly.


214
00:15:09,240 --> 00:15:11,800
We do not have full compliance with all of the gateway specs.


215
00:15:11,800 --> 00:15:20,360
You know, some of the edges around exporting tar files and range requests and, you know,


216
00:15:20,360 --> 00:15:24,240
some of the, you know, redirects files and whatnot are still missing.


217
00:15:24,240 --> 00:15:26,440
Let's clean those up.


218
00:15:26,440 --> 00:15:29,640
There's still a bunch of, as you can see, battle testing and hardening of this that


219
00:15:29,640 --> 00:15:34,320
needs to happen before it's like widely deployable.


220
00:15:34,320 --> 00:15:39,880
But it would be pretty cool to use something like this so that if you hit, you know, a


221
00:15:39,880 --> 00:15:41,680
central service, right?


222
00:15:41,680 --> 00:15:43,600
Like do you have.link?


223
00:15:43,600 --> 00:15:45,320
And you get a 429.


224
00:15:45,320 --> 00:15:48,440
Sorry, you asked us for too much stuff.


225
00:15:48,440 --> 00:15:50,760
Or hey, you asked us for a 100 gigabyte file.


226
00:15:50,760 --> 00:15:53,140
And like, no thank you.


227
00:15:53,140 --> 00:15:55,160
Or something like that.


228
00:15:55,160 --> 00:15:58,280
You could try again in a minute and see if that's okay.


229
00:15:58,280 --> 00:16:03,000
Because, you know, maybe your spamming is now acceptable for you to try again.


230
00:16:03,000 --> 00:16:06,100
Or you can just do it yourself.


231
00:16:06,100 --> 00:16:11,800
And that is an option that's now available to you.


232
00:16:11,800 --> 00:16:18,020
And then adding in support for, you know, alternative protocols and data types that


233
00:16:18,020 --> 00:16:26,080
aren't, there's no current way to get at with the commonly deployed gateway implementations.


234
00:16:26,080 --> 00:16:31,880
How do I join the party?


235
00:16:31,880 --> 00:16:32,880
Try it.


236
00:16:32,880 --> 00:16:34,040
Report back.


237
00:16:34,040 --> 00:16:35,920
As things improve, see which things get better.


238
00:16:35,920 --> 00:16:36,920
Which things that don't.


239
00:16:36,920 --> 00:16:40,560
Which things, you know, still need more work.


240
00:16:40,560 --> 00:16:41,560
File PRs.


241
00:16:41,560 --> 00:16:42,560
File issues.


242
00:16:42,560 --> 00:16:47,640
I've seen a number of different things where people have tried to do, tried to work in


243
00:16:47,640 --> 00:16:52,800
a very similar vein now that we're starting to unblock a lot of this.


244
00:16:52,800 --> 00:16:53,960
You can share ideas.


245
00:16:53,960 --> 00:16:54,960
We can share code.


246
00:16:54,960 --> 00:16:55,960
Either seems good.


247
00:16:55,960 --> 00:16:59,680
Both seems better.


248
00:16:59,680 --> 00:17:04,000
If you have something you feel like has been missing, right, you have a data transfer protocol.


249
00:17:04,000 --> 00:17:05,280
You'd like to see how it works.


250
00:17:05,280 --> 00:17:13,280
Let's see if our abstractions are workable enough to plug in your thing and make it operable.


251
00:17:13,280 --> 00:17:18,860
If you run an IPFS implementation that supports QUIC, enable web transport so people and browsers


252
00:17:18,860 --> 00:17:20,400
can fetch your data.


253
00:17:20,400 --> 00:17:26,520
If you can't, they will need either certificates or WebRTC, both of which are pretty sad.


254
00:17:26,520 --> 00:17:27,960
Enable web transport.


255
00:17:27,960 --> 00:17:33,860
If you have GoLoopP2P as part of your thing, enable web transport.


256
00:17:33,860 --> 00:17:37,920
And for those who are here in person, there'll be some hacking going on tomorrow.


257
00:17:37,920 --> 00:17:43,520
You can check the channel for this track for more information.


258
00:17:43,520 --> 00:17:49,320
I want to thank a bunch of people who did the lion's share of the work.


259
00:17:49,320 --> 00:17:56,120
Russell and Marco have been awesome at both putting the demos together and plugging all


260
00:17:56,120 --> 00:18:00,040
the pieces together and finding all of the things that have been lying around for a while


261
00:18:00,040 --> 00:18:02,600
and making them operate.


262
00:18:02,600 --> 00:18:06,480
And finding web transport bugs and fixing web transport bugs.


263
00:18:06,480 --> 00:18:15,200
And implementing HTTP over LoopP2P inside of a web browser and then plugging it in.


264
00:18:15,200 --> 00:18:18,240
And then there are a lot of people who do not work directly on this, but whose work


265
00:18:18,240 --> 00:18:23,560
we have directly or indirectly benefited from.


266
00:18:23,560 --> 00:18:29,480
Particular shoutouts to Mo and Alex.


267
00:18:29,480 --> 00:18:36,440
And all the folks, many of whom are now hanging out in the DAG house who worked on the IPFS


268
00:18:36,440 --> 00:18:43,240
service worker demos from four years ago and JSIPFS gateway code from around then.


269
00:18:43,240 --> 00:18:48,320
And to the many more of you that I've talked to or have helped this move along.


270
00:18:48,320 --> 00:18:49,320
Thanks.


271
00:18:49,320 --> 00:19:09,900
So I thank you all for coming.
