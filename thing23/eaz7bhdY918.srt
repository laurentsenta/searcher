1
00:00:00,000 --> 00:00:11,520
Hello everyone, so the next talk is about Bakayao which is a low-cost compute. And this


2
00:00:11,520 --> 00:00:23,840
is Bakayao and FEM forms the third pillar of Filecoin masterplan. So let's start with


3
00:00:23,840 --> 00:00:35,840
this presentation about Bakayao. So Bakayao is a compute-over-data project and Bakayao


4
00:00:35,840 --> 00:00:41,440
translated from Portuguese as code and code stands for compute-over-data.


5
00:00:44,960 --> 00:00:49,840
So what is Bakayao? And it's called Bakayao is a centralized compute network that provides


6
00:00:49,840 --> 00:00:56,080
an efficient and cost-effective way to process off-chain computations. Unlike traditional


7
00:00:56,960 --> 00:01:04,320
computing systems, Bakayao leverages the power of distributed network of nodes to perform complex


8
00:01:07,520 --> 00:01:13,680
tasks that process data, that process next to data.


9
00:01:13,680 --> 00:01:22,240
And why we need this Bakayao? So first of all, very large data has a gravity, so it means that


10
00:01:22,960 --> 00:01:29,200
it's really expensive to move data around, to copy it for processing, and then you need to


11
00:01:29,200 --> 00:01:36,880
store it somewhere. So it means that you have to pay for storage local services. And then the source


12
00:01:36,880 --> 00:01:43,760
code size is relatively small, so that's why Bakayao is really efficient of running jobs over data,


13
00:01:43,760 --> 00:01:50,160
especially over data that is stored on a PFS. So instead of sending data where the source code is,


14
00:01:51,200 --> 00:01:54,080
we send a source code where the data lives.


15
00:01:57,200 --> 00:02:03,120
So this sets Bakayao apart from other decentralized compute networks because it's


16
00:02:03,120 --> 00:02:08,960
efficient computing architecture and fault-tolerant design. Bakayao ensures that computations are


17
00:02:08,960 --> 00:02:15,040
completely accurate and on time, even in the face of network failures and other disruptions.


18
00:02:16,080 --> 00:02:24,000
So it has four main advantages. It has reduced complexity because Bakayao simplifies the process


19
00:02:24,000 --> 00:02:30,400
of managing compute jobs by providing this uniform platform for managing jobs across different smart


20
00:02:30,400 --> 00:02:36,880
contracts, where results of one computation can be input for other off-chain computations.


21
00:02:37,760 --> 00:02:47,200
It also provides fault tolerance because if nodes fail during the compute process,


22
00:02:47,200 --> 00:02:54,320
then it will trigger the network to find another executor node to execute this job correctly.


23
00:02:54,320 --> 00:02:59,440
And it also increases reliability because Bakayao provides reliable network partitioning


24
00:02:59,440 --> 00:03:04,880
and resistant orchestration. And this ensures that your job is complete, even if there are


25
00:03:04,880 --> 00:03:12,560
network disruptions. And the last one is enhanced security. This comes from the fact that instead of


26
00:03:13,600 --> 00:03:20,000
bringing data to compute, you bring compute over data and you minimize the data movement


27
00:03:20,000 --> 00:03:27,680
of that compute. And that's the four main advantages of Bakayao.


28
00:03:30,240 --> 00:03:36,960
So from the developer experience, what developers need to do, they need to send the data where it


29
00:03:36,960 --> 00:03:44,640
is and it performs the best when the data is stored on IPFS or Filecoin.


30
00:03:44,640 --> 00:03:52,880
It also, like, your compute needs to be dockerized or you need to compile


31
00:03:52,880 --> 00:04:00,240
voice binaries, which means that there is language-agnostic computations that are accepted


32
00:04:00,240 --> 00:04:07,840
by Bakayao. And also there is heterogeneous hardware. This means that it runs any GPUs,


33
00:04:07,840 --> 00:04:19,600
it runs GPUs, it has also machines with high memory and whatever other hardware that


34
00:04:19,600 --> 00:04:26,400
usually people don't have at home. So the last thing is, like, this is batch data processing


35
00:04:26,400 --> 00:04:33,280
via easy-to-use CLI or Lilliput interface that will be, Wes will be speaking in a minute.


36
00:04:33,280 --> 00:04:40,480
And these are the commands that you need to use to run it via CLI. So the main applications is


37
00:04:41,440 --> 00:04:50,480
AI, ML, and financial modeling. It's because it's designed to be very highly scalable,


38
00:04:50,480 --> 00:04:57,200
meaning that it can handle large volumes of data and extensive computations. So this is


39
00:04:57,200 --> 00:05:03,360
what makes Bakayao the valuable tool to a wide range of applications in any industry that has


40
00:05:03,360 --> 00:05:12,560
applications of AI and ML. And lastly, the vision of Bakayao is to transform data collection and


41
00:05:12,560 --> 00:05:18,400
processing by giving developers very simple and first-class distributed tools and locating new


42
00:05:18,400 --> 00:05:28,400
collaborations in the ecosystem. So this is the first part of the talk, and the next will be


43
00:05:28,400 --> 00:05:36,800
about Lilliput that will be run by Wes Floyd, who is a product manager for Bakayao. So please let me


44
00:05:36,800 --> 00:05:48,480
know if you have any questions, and he'll also be covering a demo of Lilliput and other use cases.
