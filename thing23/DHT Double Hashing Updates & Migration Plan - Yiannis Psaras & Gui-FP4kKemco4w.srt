1
00:00:00,000 --> 00:00:14,200
Hello everyone, welcome to this very exciting talk. So I'm going to talk about the DHT reader


2
00:00:14,200 --> 00:00:20,780
privacy plan in contrast to what Masip was expecting or wanting. I'm not going to go


3
00:00:20,780 --> 00:00:27,560
into the details of how it works. It has been detailed before in IPFS camp and IPFS thing


4
00:00:27,560 --> 00:00:37,080
last year. So we're just going to go through what it is in a nutshell, the benefits, and


5
00:00:37,080 --> 00:00:42,080
then basically we're going to focus on this second part, which is the migration strategy,


6
00:00:42,080 --> 00:00:47,680
because what we're talking about here is a breaking change to the protocol, and therefore


7
00:00:47,680 --> 00:00:57,120
we need to get some of these details correctly. So with that, I'll start by saying that this


8
00:00:57,120 --> 00:01:04,960
has been called double hashing for quite some time now, since the starting of the design


9
00:01:04,960 --> 00:01:13,320
that was primarily masterminded by Guillaume, which is the other presenter and author of


10
00:01:13,320 --> 00:01:21,880
the presentation. But the double hashing as a term might not be very accurate, so we might


11
00:01:21,880 --> 00:01:29,680
be changing the name a little bit, but generally it's a reader privacy upgrade. So it doesn't


12
00:01:29,680 --> 00:01:41,400
touch the writer, the publisher privacy of the DHT. So in a nutshell, what we have is


13
00:01:41,400 --> 00:01:48,360
traditionally, we have the multi-hash, which simplistically is the hash of the content


14
00:01:48,360 --> 00:01:53,520
that you have. It's got some metadata, but anyway, let's say this is the hash of the


15
00:01:53,520 --> 00:02:00,760
content. Then you have the CAD, which is the multi-hash with some more metadata. And then


16
00:02:00,760 --> 00:02:09,560
basically what this double hashing approach says is that it's going to be the hash of


17
00:02:09,560 --> 00:02:17,400
a sort plus the multi-hash. So this is what is included in the latest spec, and that's


18
00:02:17,400 --> 00:02:28,080
why it ended up being called double hash, because it's another hashing step. If you


19
00:02:28,080 --> 00:02:32,640
want to learn all the details of how you go from the hash of the content to the multi-hash


20
00:02:32,640 --> 00:02:39,760
then to the CAD, I definitely recommend watching this module on content addressing in APFS from


21
00:02:39,760 --> 00:02:45,880
the ResNetLab on Tour tutorial. It's great, gives all the details. And then of course


22
00:02:45,880 --> 00:02:51,400
the double hashing part is not included in there because it's very new.


23
00:02:51,400 --> 00:02:57,880
Now the reader privacy upgrade, the approach, is actually three things. The first one is


24
00:02:57,880 --> 00:03:13,480
that it's a CAD agnostic DHT lookup, which is different to what we do today, where the


25
00:03:13,480 --> 00:03:19,960
CAD is in plain sight and everyone can see what CAD is being requested. Then the second


26
00:03:19,960 --> 00:03:27,200
part is the fact that we can request, we can do prefix requests, so not ask for the whole


27
00:03:27,200 --> 00:03:33,640
thing of what we want, but rather a subset of this. And I'm going to explain what this


28
00:03:33,640 --> 00:03:38,520
means in a minute. And then we have provide the record encryption. So the provide the


29
00:03:38,520 --> 00:03:44,880
record right now is in kind of plain sight again, but with this approach it's going to


30
00:03:44,880 --> 00:03:55,880
be encrypted using the CAD itself. So what are the benefits? So the plain CAD replay


31
00:03:55,880 --> 00:04:01,360
is not possible. Right now if you're participating in the DHT as a DHT server or if you're sniffing


32
00:04:01,360 --> 00:04:06,760
traffic in one way or the other, you can see which CAD is being requested, you can request


33
00:04:06,760 --> 00:04:13,480
it yourself, and then you can associate the client, the requester, who is requesting the


34
00:04:13,480 --> 00:04:20,640
CAD, with the CAD itself. So what content does this guy get from the network, and also


35
00:04:20,640 --> 00:04:26,640
who is it getting it from. So basically everything is in the open. Now if we go to this approach,


36
00:04:26,640 --> 00:04:34,000
you can still replay the request, but you cannot read the provide the record, because


37
00:04:34,000 --> 00:04:38,760
it's encrypted and therefore you cannot find out what the content that this guy is looking


38
00:04:38,760 --> 00:04:48,640
for, what the guy is looking for, basically. The prefix requests that I just mentioned


39
00:04:48,640 --> 00:04:57,640
a couple of slides ago basically return several provide the records, because you're not asking


40
00:04:57,640 --> 00:05:05,000
for the whole thing, you're asking for a part of the prefix of the new hash, of the double


41
00:05:05,000 --> 00:05:11,600
hash, and therefore there might be several provide the records that match this prefix


42
00:05:11,600 --> 00:05:17,680
only. And therefore what you're going to get back is more provide the records than the


43
00:05:17,680 --> 00:05:27,200
one that you're looking for. So through k-anonymity rules, the intermediate DHT server or anyone


44
00:05:27,200 --> 00:05:31,680
else cannot know which thing exactly you're looking for, because they're going to think


45
00:05:31,680 --> 00:05:40,600
okay this guy might be looking for one out of these ten things that are matching my request.


46
00:05:40,600 --> 00:05:45,440
This is not making it impossible to figure out, because at some points the hash space


47
00:05:45,440 --> 00:05:51,960
might be kind of more sparse, and there could be more just one or a few provide the records


48
00:05:51,960 --> 00:05:57,840
that match, and therefore you don't have to guess out of a hundred, you might have to


49
00:05:57,840 --> 00:06:04,360
guess out of one or two, which is not a hard guess, but still more often than not, and


50
00:06:04,360 --> 00:06:10,040
given that the network is growing in terms of volume of content, it's going to make it


51
00:06:10,040 --> 00:06:17,760
much more difficult. And then we have provide the record encryption, which as I said is


52
00:06:17,760 --> 00:06:25,680
basically getting the provide the record and encrypting it with the CAD itself. So therefore


53
00:06:25,680 --> 00:06:32,880
if you want to decrypt it, you can only decrypt it if you know the CAD itself. And therefore


54
00:06:32,880 --> 00:06:40,600
the intermediate DHT server cannot really associate the client requesting the record


55
00:06:40,600 --> 00:06:49,520
with the CAD, which is the kind of end goal for what we're doing here. Now as I said,


56
00:06:49,520 --> 00:06:55,280
this is a breaking change, and those changes are a little bit painful. They cannot just


57
00:06:55,280 --> 00:07:01,000
be included in a release, because everyone who has not upgraded is going to be excluded


58
00:07:01,000 --> 00:07:07,360
from that point on. So we need to have a migration plan, and we need to get the vast majority


59
00:07:07,360 --> 00:07:14,360
of nodes to upgrade to the new DHT at once. And yeah, a question for the audience. Do


60
00:07:14,360 --> 00:07:25,560
you think, do you know why that might be a good goal for the migration plan?


61
00:07:25,560 --> 00:07:37,080
So no one is left out? Yes and no. Yeah, that's idealistic. All lookups break? No, not all


62
00:07:37,080 --> 00:07:41,320
lookups will break. We're going to cover that, but this is definitely a requirement of the


63
00:07:41,320 --> 00:07:54,200
whole plan. Sorry? Privacy? In what sense? Ah, right. Yeah, obviously those that don't


64
00:07:54,200 --> 00:07:59,040
migrate, they're not going to be private, because that's how things work now. Yeah,


65
00:07:59,040 --> 00:08:04,760
the answer is due to security. So if you have a small fraction of nodes upgrading to the


66
00:08:04,760 --> 00:08:12,080
new scheme, then it's much easier to see build that network, and create fake identities,


67
00:08:12,080 --> 00:08:19,280
and kind of take over the new network before the majority of nodes have upgraded. Yeah.


68
00:08:19,280 --> 00:08:27,840
So that's the goal, and the challenge is basically we need to make the date or the point in time


69
00:08:27,840 --> 00:08:34,040
that everyone migrates and upgrades to the new release, to the new scheme, common knowledge


70
00:08:34,040 --> 00:08:39,400
across everyone in the network. Which is of course difficult to do, because no one controls


71
00:08:39,400 --> 00:08:48,320
the software, and it's difficult to do that at once. So that's where the migration plan


72
00:08:48,320 --> 00:08:55,900
is focusing on, and the summary of it is that the team, the IP Stewards team and the Probably


73
00:08:55,900 --> 00:09:02,440
team came up with, with help from others of course, is to use an IPNS key that is going


74
00:09:02,440 --> 00:09:07,920
to be hard-coded in one of the Kubo releases, the one that is going to basically roll out


75
00:09:07,920 --> 00:09:17,280
the update, and orchestrate the nodes through this Kubo release to be requesting this key


76
00:09:17,280 --> 00:09:24,960
every so often. So as a clarification, everything in the next couple of slides that is in red


77
00:09:24,960 --> 00:09:29,920
fonts is things we don't know, and parts of the migration plan that we need to get in


78
00:09:29,920 --> 00:09:35,840
place. So every so often, it could be every day or every week or every hour, we don't


79
00:09:35,840 --> 00:09:45,600
know, it's just a detail that we need to kind of iron out. So that's how, if every day,


80
00:09:45,600 --> 00:09:52,840
if there is an IPNS key that includes, simplistically could include a Boolean like true or false


81
00:09:52,840 --> 00:10:01,680
or a date, then everyone that is pulling this IPNS record daily, and checking the fields


82
00:10:01,680 --> 00:10:07,720
that we want them to check, they're going to know, this is the date or this has turned


83
00:10:07,720 --> 00:10:18,600
to true now, so it should go and upgrade. The migration date of course, it needs to


84
00:10:18,600 --> 00:10:27,000
now be setting the date in this IPNS key or the Boolean if it's true or false to the right


85
00:10:27,000 --> 00:10:33,720
value needs to happen when enough peers have upgraded to this release. So this will need


86
00:10:33,720 --> 00:10:41,680
to monitor, which we do through our crawler, and we are going to be able to see when enough


87
00:10:41,680 --> 00:10:46,800
peers, I don't know what enough might mean, 50% of the network, 70, 30, I don't know,


88
00:10:46,800 --> 00:10:54,480
we'll have to figure that out. Now, on that migration date, we have different peers and


89
00:10:54,480 --> 00:11:03,160
kind of peer categories that need to follow their migration strategy. And by this, yeah,


90
00:11:03,160 --> 00:11:11,560
by every peer, I mean DHC clients, DHC servers, content providers, all these different kind


91
00:11:11,560 --> 00:11:18,040
of network players, which I'm going to mention in a minute and go in detail in a minute.


92
00:11:18,040 --> 00:11:28,120
A couple of other parameters is the switch date. So this is when we're going to see that


93
00:11:28,120 --> 00:11:34,600
enough peers, as I said, have upgraded, and we think that we are now ready to do the switch,


94
00:11:34,600 --> 00:11:38,640
that the date is going to be fixed. And the transition period, which is something quite


95
00:11:38,640 --> 00:11:45,160
important, the period of time when peers in the network will have the opportunity to use


96
00:11:45,160 --> 00:11:52,320
both DHCs. So it's going to be a little bit risky to just deprecate the old one just right


97
00:11:52,320 --> 00:11:58,040
at once, because I don't think, we don't think that everyone is going to be in front of their


98
00:11:58,040 --> 00:12:03,800
laptop to do the upgrade at a specific moment. So there needs to be some period there. And


99
00:12:03,800 --> 00:12:11,360
the exact period, yeah, it's relatively tricky to set, but we need to get to that.


100
00:12:11,360 --> 00:12:17,160
Now during the transition period, and this is where we get into each DHC, key DHC player,


101
00:12:17,160 --> 00:12:22,760
we have the bootstrappers that are, of course, key part of the DHC network still, maybe not


102
00:12:22,760 --> 00:12:28,680
in the future, but they are now. They should be providing peer IDs for both the new and


103
00:12:28,680 --> 00:12:36,920
the old DHC, so that a new DHC client or server getting into the network and wanting to connect


104
00:12:36,920 --> 00:12:42,360
to others, they know that they have peers to connect to. So that's the easy part. These


105
00:12:42,360 --> 00:12:48,760
are a few. They're currently controlled by APL, so it's not easy to set that there.


106
00:12:48,760 --> 00:12:54,120
Now the content providers, especially the big ones, by default, they should switch to


107
00:12:54,120 --> 00:13:00,440
the new DHC on that transition date. They do have the option to stay in the old DHC


108
00:13:00,440 --> 00:13:07,120
and keep on providing their content, but they will have to do so kind of manually to touch


109
00:13:07,120 --> 00:13:14,240
the... either choose the right option in the APNS key or their own code base that they're


110
00:13:14,240 --> 00:13:22,660
running on their machines. Now you can understand that there is one system that is running now,


111
00:13:22,660 --> 00:13:27,200
and there is going to be a new one. If you're providing content and you switch to the new


112
00:13:27,200 --> 00:13:36,520
one and you only provide there, and your clients have not upgraded, so they're on the old system,


113
00:13:36,520 --> 00:13:41,520
operating on the old system, so to speak, your content is going to be unavailable, unreachable,


114
00:13:41,520 --> 00:13:42,520
which is not great. Yeah?


115
00:13:42,520 --> 00:13:58,320
How are you going to measure how many nodes have migrated, how many clients are operating


116
00:13:58,320 --> 00:14:03,080
on the new system so you can figure out when you can make the later transitions and deprecations?


117
00:14:03,080 --> 00:14:13,440
So I'll get to that in a minute. The DHC clients are, I think, easy to have... it's difficult


118
00:14:13,440 --> 00:14:19,760
to have an idea of how many DHC clients have upgraded, because this is not something we


119
00:14:19,760 --> 00:14:24,920
can crawl. This is not something that we're monitoring. But this is easier with clients,


120
00:14:24,920 --> 00:14:30,280
and this brings me to the other point. They can easily make two requests, one to the new


121
00:14:30,280 --> 00:14:36,680
DHC and one to the old DHC, to cover the case where some content provider might not have


122
00:14:36,680 --> 00:14:46,640
upgraded yet. Of course, this adds twice the number of requests to the two networks now,


123
00:14:46,640 --> 00:14:55,160
but it's not the end of the world. It will add some more traffic to the network, but


124
00:14:55,160 --> 00:15:01,200
they can prioritize to ask the new DHC first, not have two requests going out at once, so


125
00:15:01,200 --> 00:15:07,920
that if the content providers, which should hopefully upgrade right there on the switch


126
00:15:07,920 --> 00:15:12,440
date, then they're going to get their content right from the first request and not have


127
00:15:12,440 --> 00:15:19,080
to go to the second.


128
00:15:19,080 --> 00:15:26,920
And then the DHC servers, which is the intermediate nodes in the network that respond to requests


129
00:15:26,920 --> 00:15:33,720
for provider records, they might have to run both DHCs for a period of time until the old


130
00:15:33,720 --> 00:15:43,360
DHC is deprecated. Of course, this adds more requirements to the DHC servers, because they


131
00:15:43,360 --> 00:15:52,320
will need to provide the records for the old and the new DHC, and serve requests for both,


132
00:15:52,320 --> 00:16:00,400
so the traffic is going to be increased as well there.


133
00:16:00,400 --> 00:16:14,680
So this is it for the key DHC players. Any questions up to this point? Okay, no? So everything


134
00:16:14,680 --> 00:16:24,400
is understood. Excellent. Right. So the timeline. Where we are today and where we're going to


135
00:16:24,400 --> 00:16:34,160
get to. Okay. Yeah, so the spec is finalized, or it's very close to being finalized, so


136
00:16:34,160 --> 00:16:41,640
we expect only minor updates if there are any. Then the first draft of the migration


137
00:16:41,640 --> 00:16:48,080
plan is what I'm presenting right now, and we also have a discussion forum post which


138
00:16:48,080 --> 00:16:57,520
went out on the day before yesterday. And I'll get to that in a minute. Then at the


139
00:16:57,520 --> 00:17:04,280
end of this month, we want to receive feedback from the community in the discussion forum,


140
00:17:04,280 --> 00:17:09,600
from you here, and we're going to, of course, meet with the team with the opportunity that


141
00:17:09,600 --> 00:17:17,560
we're all here together, and make more progress as to when things are going to be ready. So


142
00:17:17,560 --> 00:17:25,920
the announcement is going to be in the form of a blog post and relevant comms to the community.


143
00:17:25,920 --> 00:17:32,760
Then the next steps, which are subject to change, and that's why they're pretty broad


144
00:17:32,760 --> 00:17:39,280
dated there, is finishing the implementation and the testing, which is going to be hopefully


145
00:17:39,280 --> 00:17:48,280
within Q2 of this year. And then, most likely towards the beginning of Q3 of this year,


146
00:17:48,280 --> 00:17:54,360
we're going to have a migration plan finalized if things need to change. We're going to have


147
00:17:54,360 --> 00:18:00,320
the Kubo release that is going to go out, and it's going to include both of the two


148
00:18:00,320 --> 00:18:07,160
new DHDs, the refactored DHD code, so to speak. And then at some point, when we see that enough


149
00:18:07,160 --> 00:18:11,840
peers have upgraded, there is going to be the migration triggered, and then it's going


150
00:18:11,840 --> 00:18:18,680
to be completed after the transition period has finished. So, yeah, that's the timeline


151
00:18:18,680 --> 00:18:28,040
to migration. Admittedly, we don't have set dates yet, but look out for updates in this


152
00:18:28,040 --> 00:18:33,280
discussion forum blog post, sorry, in this discussion forum post, which is going to serve


153
00:18:33,280 --> 00:18:38,600
basically as a point of reference for anything that we do. So, we're going to be posting


154
00:18:38,600 --> 00:18:42,920
updates there. As I said, there might be a blog post, but we're also going to post it


155
00:18:42,920 --> 00:18:50,680
here. So, if you're interested, just follow that. And how to reach out to the team is


156
00:18:50,680 --> 00:18:57,240
the usual suspects through the IPFS Discord server. There is a libptp-privacy channel


157
00:18:57,240 --> 00:19:04,840
there, but you can also reach out to libptp-implementers and ProbeLab, and most of these channels are


158
00:19:04,840 --> 00:19:11,520
also findable in the file going slack. There is a working group session scheduled on this


159
00:19:11,520 --> 00:19:19,280
topic to make some more progress and hopefully get to define the parameters that I put in


160
00:19:19,280 --> 00:19:25,840
red the slides before, the transition period, how often the IP and S keys should be fetched


161
00:19:25,840 --> 00:19:32,000
by all of the nodes in the network, and all those unknowns right now. Hopefully, we can


162
00:19:32,000 --> 00:19:39,400
get some answers. So, if you're interested, I think that is scheduled for Wednesday, so


163
00:19:39,400 --> 00:19:44,680
in three days from now. If you're interested, just reach out to me and we'll be in one of


164
00:19:44,680 --> 00:19:47,760
the rooms on this floor.


165
00:19:47,760 --> 00:19:55,920
So, yeah, as pointers now, the spec is a source of truth, as I mentioned previously. If you


166
00:19:55,920 --> 00:20:00,800
want to know the details, just get to that. There has been a lot of work done on this


167
00:20:00,000 --> 00:20:08,760
it's IP IP 373. There has been lots of discussion there. You see lots of comments, lots of commits, lots of revisions.


168
00:20:08,760 --> 00:20:18,240
So, if you want all the detail, that's the place to go. And Guillem has given some very nice talks, as I said, in IPFSCamp and IPFSThing last year.


169
00:20:18,240 --> 00:20:33,480
So, these might contain a bit of out-of-date info, but mostly, if you're interested in the basics of how things work and why they work this way, I think they're still valid.


170
00:20:33,480 --> 00:20:40,480
Yeah, and that's it. Any questions and what should we explain better?


171
00:20:40,480 --> 00:20:55,480
This might be in the details, so feel free to reject this question. But could you speak a little more to the threat model, maybe, of the content privacy?


172
00:20:55,480 --> 00:21:07,480
Because I'm thinking, for example, if somebody knew up front certain content IDs that they wanted to track or block, it seems like they could trivially decrypt the provider records.


173
00:21:07,480 --> 00:21:25,480
Yeah. So, the main threat model here is that we don't want anyone in the network to be able to observe traffic, CIDs, who is requesting what, and who is serving the thing that has been requested.


174
00:21:25,480 --> 00:21:48,480
So, that's why it's called reader privacy. Indeed, if someone has got the CID, then things are becoming a lot easier. But in the general case, we want to primarily avoid those that sniff traffic from the network and can build dictionaries of what happens at which point.


175
00:21:48,480 --> 00:21:53,480
Any other input from Guillem?


176
00:21:53,480 --> 00:22:08,480
Yeah, so I would say the privacy of the request highly depends on the secrecy of the CID, which means that if I'm sharing with you my holiday pictures and they are not publicly addressed on the web, then it's going to be totally private.


177
00:22:08,480 --> 00:22:21,480
But if you're trying to access to, I don't know, a Wikipedia page that is very popular, then DHT servers that know this very specific CID will know that you access it.


178
00:22:21,480 --> 00:22:31,480
So, for very public data, it doesn't give much privacy, but for, let's say, more private data, it is able to provide privacy.


179
00:22:31,480 --> 00:22:52,480
What about the flip side? What solutions can you think of in terms of blocking specific CIDs, for example? Because if all the CIDs are encrypted, if you want to remove some unsavory CID, how would we go about doing that with the reader privacy?


180
00:22:52,480 --> 00:23:09,480
So, someone like, you'd have to know the CID, right? Kind of similar to today, you have to know the CID of some bad content that you might not want to serve from the network.


181
00:23:09,480 --> 00:23:19,480
So, as soon as you know that through some out-of-bound means, then you can do the same as you do today, I think.


182
00:23:19,480 --> 00:23:40,480
That's right. I guess what I was getting at is getting to know that CID is now more difficult because if there is a specific circle in the system that distribute content that we don't want them to, as long as they don't leak the CIDs themselves, we would never know what those CIDs that are being looked up, right?


183
00:23:40,480 --> 00:23:56,480
From an outside perspective. Yeah, but you cannot read. Yeah, correct. But you cannot, you or no one else, unless they know the CID, can decrypt or see what's in the content.


184
00:23:56,480 --> 00:24:18,480
So, everything is encrypted. So, that's why, yeah, so right now, if you have a CID that might fall into the hands of someone that should not look at it, they can look at it. Then, this is not going to be possible unless you explicitly want them to know what the CID is.


185
00:24:18,480 --> 00:24:30,480
Yeah, basically, I think if you have a blacklist of second hash to block, then it's easy to block, and otherwise, you cannot block the content routing of something you don't know what it is.


186
00:24:30,480 --> 00:24:31,480
Yeah.


187
00:24:31,480 --> 00:24:58,480
In terms of the migration plan, have you thought, in terms of, has there been any consideration, now that we have this pluggable content routing layer, that instead of running the old DHT version, it would fall back towards IP and I, for example, so you don't have to have this duplicate logic and maintain that and just do a clear upgrade?


188
00:24:58,480 --> 00:25:10,480
Yeah, so the fact that IP and I now exist, there is a fallback option, and therefore, the transition period running both DHTs might not even be needed. That's what you're saying?


189
00:25:10,480 --> 00:25:11,480
Yeah.


190
00:25:11,480 --> 00:25:32,480
That's correct. We're taking that into account, that CID.contact is now part of Kubo, and I guess that it's not going to be removed, I don't know when or if ever, but by the point we get there, which is going to be in a few months, it should still be there. So yeah, we're taking that into account. It might help.


191
00:25:32,480 --> 00:25:43,480
And maybe a follow-up, for testing, what's the plan for testing if, yeah, I guess just testing that it'll work in production before rolling out 100%?


192
00:25:43,480 --> 00:26:12,480
Yeah, so what can happen is that we can, as I said, there is going to be a new Kubo release out, but it's not going to be triggered, the migration is not going to be triggered directly. So during that point, we will have the option to test it by, you know, kind of on purpose migrating our own private cluster machines to interact with the public network at the same time.


193
00:26:12,480 --> 00:26:26,480
Do all the double hashing logic. So, of course, we're going to have tests beforehand, but they're going to be kind of live tests when our machines have migrated, but not everyone else's.


194
00:26:26,480 --> 00:26:48,480
With any kind of privacy improvement, like one of the challenges is how do you explain the limitations of it? Yeah. And the benefits of it to, well, you have kind of a lay audience, but also you have an audience, I think, that we support at the foundation, a bunch of very privacy conscious sort of use cases.


195
00:26:48,480 --> 00:27:07,480
And I think that they have a very good understanding of kind of a web to threat model and less in a decentralized way, just through experience. So I'm sort of trying to work out how I would explain the change here.


196
00:27:07,480 --> 00:27:30,480
It strikes me that one of the ways we could explain it is by talking about the steps that have been taken to protect DNS lookups. Right. So there's been a whole sort of debate about DOH and like how, you know, how DNS lookups are actually plain text and have been for a while and the movement to that.


197
00:27:30,480 --> 00:27:45,480
Is that a useful analogy? Can you think of another one if I'm explaining it not to a lay person so much, but someone who is used to a traditional web security model or internet security model?


198
00:27:45,480 --> 00:28:04,480
Maybe an abstraction we could have concerning this is that we would use a different content identifier for content routing and for data transfer, which means that now we have the CID, which is kind of the master content identifier.


199
00:28:04,480 --> 00:28:19,480
And now we'll hash it with a specific hash, which will give us the counter routing identifier. But then once you know where the content is located, you need to derive a new content identifier.


200
00:28:19,480 --> 00:28:41,480
So for instance, you hash the CID with another salt and then you will request the content using this other name. And so it means that even if you were, if you observe, if you sniff some traffic in the content routing system, you wouldn't get the data transfer name for this specific file and you wouldn't be able to fetch it.


201
00:28:41,480 --> 00:28:50,480
So that's like more changing around the namespace. If that answers your question.


202
00:28:50,480 --> 00:28:52,480
Does this answer your question or is it not?


203
00:28:52,480 --> 00:28:54,480
It gives you some more fuel.


204
00:28:54,480 --> 00:28:55,480
Yeah.


205
00:28:55,480 --> 00:29:17,480
So, yeah, an analogy that just comes to mind now, so I don't know if even if it's too accurate, could be, you know, we have the DNS system where you're asking for some URL through the browser, but then you have services such as the ones that are making the URL shorter.


206
00:29:17,480 --> 00:29:31,480
So basically that's an identifier of something that I cannot understand what it is. I might have an intuition if I've used it before that, you know, three letters stand for, I don't know, some website normally.


207
00:29:31,480 --> 00:29:54,480
But otherwise I'm asking for something that I don't know. And therefore, if everyone else on the path sniffs my traffic, of course, the DNS server will know what to do, right? But everyone else that is just sniffing my traffic from, say, my Wi-Fi access point will not know now what I'm requesting.


208
00:29:54,480 --> 00:30:08,480
I think probably what we have to do is to spell out some threat models that people are familiar with and go, okay, how does this change what the capabilities of an attacker have?


209
00:30:08,480 --> 00:30:09,480
Definitely.


210
00:30:09,480 --> 00:30:14,480
Because if someone's tracking your… yeah.


211
00:30:14,480 --> 00:30:29,480
Yeah, definitely. We're going to have very clear communication, yeah, through written, but both, you know, in some form of video recording of, you know, what can be done and what cannot be done from now on.


212
00:30:29,480 --> 00:30:36,480
And we've got a threat model section on the spec.


213
00:30:36,480 --> 00:30:47,480
Just to sort of follow up on Danny's question and the earlier question about threat models, to make sure I'm understanding this correctly when I communicate with some of those project partners and activist organizations.


214
00:30:47,480 --> 00:31:15,480
NSA style mass snooping has now become very difficult with this new change. But if there's a particular, like, high profile CID that's known to the ecosystem, this does not prevent somebody from figuring out exactly who is requesting that CID.


215
00:31:15,480 --> 00:31:26,480
And they could even, if there was a list of those resources, still do a mass surveillance program on that full list to see who is accessing those resources?


216
00:31:26,480 --> 00:31:28,480
Yeah, correct.


217
00:31:28,480 --> 00:31:29,480
Okay.


218
00:31:29,480 --> 00:31:41,480
As long as you have the HD server located at the right places in the XOR space.


219
00:31:41,480 --> 00:31:53,480
I mean, there are optimizations there as well that can be done in the future, but I think they will be based on this base model, like, you know, changing the sort and doing things like that.


220
00:31:53,480 --> 00:31:59,480
I think our optimizations that we can think of as a second step to avoid that case as well.


221
00:31:59,480 --> 00:32:05,480
But yeah, what you're saying is basically valid.


222
00:32:05,480 --> 00:32:13,480
Would those optimizations or whatever future change, would they also require an expensive upgrade like this?


223
00:32:13,480 --> 00:32:15,480
I don't think so.


224
00:32:15,480 --> 00:32:22,480
Thank you very much. If you're interested, reach out and let's have a session separately later on this week.


225
00:32:22,480 --> 00:32:36,480
Okay.
