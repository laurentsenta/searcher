1
00:00:00,000 --> 00:00:09,240
Hi everyone, I'm Claudia, I'm the founder at Banyan, we bring data onto Filecoin and


2
00:00:09,240 --> 00:00:15,080
on the side I do research for fun, this is a project from August 22 that I did on the


3
00:00:15,080 --> 00:00:19,440
side after work, I think it should probably be shared with the community because I've


4
00:00:19,440 --> 00:00:25,720
not really seen any correctly done incentives for Saturn yet, we know incentivized retrievals


5
00:00:25,720 --> 00:00:31,040
are problematic on both Filecoin and IPFS, everyone in this room knows about that, this


6
00:00:31,040 --> 00:00:36,280
talk is going to be a state of how things are right now, and my vision for how we could


7
00:00:36,280 --> 00:00:40,740
build decentralized retrievals of service, so to be clear this is not you pay a miner


8
00:00:40,740 --> 00:00:46,680
and retrieve your data, this is how do you do it at CDN speed completely trustlessly,


9
00:00:46,680 --> 00:00:50,040
so this is going to be kind of vague, there's going to be a lot of now draw the rest of


10
00:00:50,040 --> 00:00:55,840
the owl, call block science, this needs to be modeled, or we need to implement this,


11
00:00:55,840 --> 00:00:59,200
but yeah, here we go.


12
00:00:59,200 --> 00:01:02,240
Problem description.


13
00:01:02,240 --> 00:01:04,040
What is a CDN?


14
00:01:04,040 --> 00:01:07,880
People want their data quickly, I talk to potential Filecoin users a lot at my company,


15
00:01:07,880 --> 00:01:12,280
people really want speed, we all know this, data is all over the planet, we need to get


16
00:01:12,280 --> 00:01:17,640
it to people quickly, and durability under attempted censorship by dishonest nodes is


17
00:01:17,640 --> 00:01:21,400
very important, also getting the data and keeping the data closer to the person who


18
00:01:21,400 --> 00:01:24,400
actually wants it is important, incentivizing this is hard.


19
00:01:24,400 --> 00:01:25,880
Okay, there's context.


20
00:01:25,880 --> 00:01:31,120
I'm going to be using Alice for the users at the edge, both uploaders and downloaders,


21
00:01:31,120 --> 00:01:35,080
Charlie is the message passers in the middle, incentivizing them trustlessly, even though


22
00:01:35,080 --> 00:01:40,160
they may want to censor you is also important, figuring out how the market is going to incentivize


23
00:01:40,160 --> 00:01:44,400
them to warehouse data adaptively to serve it repeatedly, so you know like a person in


24
00:01:44,400 --> 00:01:49,120
New York should probably keep a copy of the really popular YouTube video that came from


25
00:01:49,120 --> 00:01:56,800
Europe, and then Bobs are holding the data and they may be decentralized like IPFS.


26
00:01:56,800 --> 00:02:00,880
So the places where I have little angels are people who have real incentives to get the


27
00:02:00,880 --> 00:02:05,640
right data to each other, the devils are people who may be censoring, and everyone is a rational


28
00:02:05,640 --> 00:02:11,280
greedy actor here, so they'll save money if they can, and they will try to get as much


29
00:02:11,280 --> 00:02:16,160
money as they can out of the counterparty as well, but yeah, that's basically like who's


30
00:02:16,160 --> 00:02:18,960
censoring and who we need to protect against censorship.


31
00:02:18,960 --> 00:02:20,320
Okay, cool.


32
00:02:20,320 --> 00:02:24,080
So this is a problem different than anything we've said before, so Magic's response to


33
00:02:24,080 --> 00:02:28,600
my talk earlier was that's provably impossible, and I'm like, yeah.


34
00:02:28,600 --> 00:02:36,640
So most consensus systems require that, like they just assume that message passing is done,


35
00:02:36,640 --> 00:02:39,440
and you know, some people are going to lie, but some people are honest.


36
00:02:39,440 --> 00:02:42,920
Well here you have the problem of you've got like a point-to-point interaction where it's


37
00:02:42,920 --> 00:02:48,440
just like two guys interacting and we need to reflect somehow in the global consensus


38
00:02:48,440 --> 00:02:50,520
that this interaction happens.


39
00:02:50,520 --> 00:02:55,880
So you've got the Byzantine generals, you know nothing globally except what's broadcasted,


40
00:02:55,880 --> 00:02:58,200
and you know there's no incentives at all.


41
00:02:58,200 --> 00:03:04,120
Bitcoin, we add the incentives, there's a last step incentivization, which is the gas


42
00:03:04,120 --> 00:03:07,400
fee, so you have an incentive if you can get it to the miner for the miner to put it on


43
00:03:07,400 --> 00:03:12,520
chain and then from there we just assume that everyone's going to gossip and you know with


44
00:03:12,520 --> 00:03:17,120
some light correctness assumptions you'll eventually get the right state.


45
00:03:17,120 --> 00:03:22,680
Cloudflare's and ISPs, it's a legal contract and then also some reputational stuff, you


46
00:03:22,680 --> 00:03:26,000
know if Cloudflare starts censoring you and you're worried about that you might switch


47
00:03:26,000 --> 00:03:30,960
ISPs or you might switch CDN or ISP.


48
00:03:30,960 --> 00:03:36,320
Censorship, you know, for the majority case you're not out of luck, but for the very small


49
00:03:36,320 --> 00:03:40,520
minority case there's really not much you can do about this.


50
00:03:40,520 --> 00:03:48,280
IPFS is volunteer based with a couple of like, you know, Cloudflare style SLAs, look at Pinata,


51
00:03:48,280 --> 00:03:51,280
and then right now we've got Filecoin, SIAs, and RWEVs right now.


52
00:03:51,280 --> 00:03:54,640
SIA does some in-band incentives that I'm going to talk about on here.


53
00:03:54,640 --> 00:03:58,920
RWEV does this thing called PIIA, which is like the miners are just going to enforce


54
00:03:58,920 --> 00:04:02,960
each other, we promise, and they put an equation on that and yeah.


55
00:04:02,960 --> 00:04:07,960
And then Filecoin is like, you know, we call them up, we pay them, maybe in Filecoin, maybe


56
00:04:07,960 --> 00:04:10,880
out of band, and then they send us the data.


57
00:04:10,880 --> 00:04:15,960
So none of these are really like incentivizing speed except for Cloudflare where it's properly


58
00:04:15,960 --> 00:04:16,960
in the SLA.


59
00:04:16,960 --> 00:04:20,760
But yeah, that's trusted and can be censored.


60
00:04:20,760 --> 00:04:24,320
So yeah, like I said, there's tension.


61
00:04:24,320 --> 00:04:29,840
There's, you know, you need this like reflection in the public state, which is the money transfer


62
00:04:29,840 --> 00:04:34,800
of I want to pay you for giving me the data.


63
00:04:34,800 --> 00:04:39,060
But also we have this private thing where if we have the tension of forwarding the packets


64
00:04:39,060 --> 00:04:44,960
to another party, that kind of destroys the value of the good in the first place.


65
00:04:44,960 --> 00:04:49,640
So like, you know, sending it to a third party who's going to referee the transmission, that


66
00:04:49,640 --> 00:04:51,040
just doesn't work at CDN speed.


67
00:04:51,040 --> 00:04:52,340
So that's an on starter.


68
00:04:52,340 --> 00:04:59,600
So how do we prove this very like he said, she said situation of like, well, I say that


69
00:04:59,600 --> 00:05:01,640
you didn't send me the data and now I don't have to pay.


70
00:05:01,640 --> 00:05:06,480
So that's problematic, because everyone needs to agree on how much money everyone got at


71
00:05:06,480 --> 00:05:08,480
the end of the process.


72
00:05:08,480 --> 00:05:11,080
Yeah, everyone's incentivized to lie.


73
00:05:11,080 --> 00:05:12,400
Seems like a mess.


74
00:05:12,400 --> 00:05:18,280
Yeah, so let's look at some prior work that we're going to ground things on.


75
00:05:18,280 --> 00:05:23,720
This is not exactly, you know, totally relevant to what we're doing, but it's an important


76
00:05:23,720 --> 00:05:24,720
prior step.


77
00:05:24,720 --> 00:05:26,140
So that's going to be bow and wire guard.


78
00:05:26,140 --> 00:05:27,600
So bow verified streaming.


79
00:05:27,600 --> 00:05:32,560
We have this long, big file and each packet that you give me, I can verify in band that


80
00:05:32,560 --> 00:05:35,400
that particular packet is correct.


81
00:05:35,400 --> 00:05:36,400
Very cool.


82
00:05:36,400 --> 00:05:39,480
Six to 7% overhead in terms of like the transmission.


83
00:05:39,480 --> 00:05:43,960
If you do the thing that RÃ¼diger did, where you kind of prune the lower layers of the


84
00:05:43,960 --> 00:05:46,440
Merkle tree, you can get much below 6 to 7%.


85
00:05:46,440 --> 00:05:47,800
So that's really, really nice.


86
00:05:47,800 --> 00:05:52,360
That means for things like video streaming, we can actually trust that the server is sending


87
00:05:52,360 --> 00:05:55,520
us the right packet as they send us the packet, even for quite big files.


88
00:05:55,520 --> 00:05:57,880
So this is good for big files and for video.


89
00:05:57,880 --> 00:06:00,120
And it's quite quick.


90
00:06:00,120 --> 00:06:05,460
And then wire guard and BTC lightning transport, which also uses the noise protocol strapped


91
00:06:05,460 --> 00:06:07,900
on top of a state channel.


92
00:06:07,900 --> 00:06:12,080
So we have this PKI identified peer.


93
00:06:12,080 --> 00:06:14,640
We ensure that nobody tampers with the content along the way.


94
00:06:14,640 --> 00:06:20,360
So the Charlies can drop everything that we send, but they can't mess with it.


95
00:06:20,360 --> 00:06:25,600
And the timer system of wire guard, where you renegotiate the handshake for your encryption


96
00:06:25,600 --> 00:06:30,480
keys is a great place to insert the code for a state channel, which is going to be a big


97
00:06:30,480 --> 00:06:32,880
part of my proposed solution.


98
00:06:32,880 --> 00:06:37,400
So you can just kind of strap payments in band on the transport layer, which we're going


99
00:06:37,400 --> 00:06:38,640
to get to it.


100
00:06:38,640 --> 00:06:43,760
So those are two things that I'm going to talk about as we keep going.


101
00:06:43,760 --> 00:06:45,280
So more prior work.


102
00:06:45,280 --> 00:06:50,060
Retrieval pinning is something that came out last year from CryptoNetLab.


103
00:06:50,060 --> 00:06:51,160
Let me just get into the description.


104
00:06:51,160 --> 00:06:52,160
Sorry for all the memes.


105
00:06:52,160 --> 00:06:55,840
They make it more fun for me to make my slides.


106
00:06:55,840 --> 00:06:56,840
So yeah.


107
00:06:56,840 --> 00:06:58,800
Let me look at...


108
00:06:58,800 --> 00:06:59,920
Okay.


109
00:06:59,920 --> 00:07:04,800
So retrieval pinning is this kind of complex protocol where you have this pool of referees


110
00:07:04,800 --> 00:07:08,920
who are more or less policing whether Bob is sending the file.


111
00:07:08,920 --> 00:07:11,120
So this is absolutely not CDN speed.


112
00:07:11,120 --> 00:07:15,720
It just makes sure that the file is available at all within a reasonable period of time.


113
00:07:15,720 --> 00:07:23,640
So what basically happens is we have Bob collateralizes, similar to a Filecoin deal.


114
00:07:23,640 --> 00:07:24,640
So that's the start.


115
00:07:24,640 --> 00:07:28,480
Bob and Alice agree on a set of moderators for their interaction, which is more or less


116
00:07:28,480 --> 00:07:33,080
the SLA of the file will be retrievable.


117
00:07:33,080 --> 00:07:36,920
If Bob is not sending the file, Alice petitions the referees.


118
00:07:36,920 --> 00:07:39,080
They get the file from Bob or slash him.


119
00:07:39,080 --> 00:07:43,720
The way that you trust the referees is complicated and lots of overhead.


120
00:07:43,720 --> 00:07:46,120
They validate it and then they forward it to Alice.


121
00:07:46,120 --> 00:07:47,640
So this is out of band.


122
00:07:47,640 --> 00:07:49,120
This is not CDN speed.


123
00:07:49,120 --> 00:07:54,240
This will never work, you know, to get your TikTok videos at the speed of dopamine.


124
00:07:54,240 --> 00:07:56,320
But it will make sure that you do get them.


125
00:07:56,320 --> 00:08:00,220
So you don't have a data hostage situation anymore, the way that you kind of do sometimes


126
00:08:00,220 --> 00:08:01,880
with Filecoin right now.


127
00:08:01,880 --> 00:08:02,880
Very cool protocol.


128
00:08:02,880 --> 00:08:06,840
I'm gonna use it as a primitive in the solution that I'm gonna come up with at the end.


129
00:08:06,840 --> 00:08:07,840
Okay.


130
00:08:07,840 --> 00:08:08,840
Yeah.


131
00:08:08,840 --> 00:08:09,840
So it's slow.


132
00:08:09,840 --> 00:08:14,920
I think it's a good thing that there's a middleman that's at minimum to RTT without all of the


133
00:08:14,920 --> 00:08:17,160
validation that they have to do between the middlemen.


134
00:08:17,160 --> 00:08:21,080
So they actually take the file, get it from Bob, and then send it to each other.


135
00:08:21,080 --> 00:08:24,640
And then one of them sends it out to Alice.


136
00:08:24,640 --> 00:08:27,160
I think that they could do proofs.


137
00:08:27,160 --> 00:08:32,000
The referees could probably do some proofs that I'm not gonna get into to agree upon


138
00:08:32,000 --> 00:08:35,520
whether the file was retrieved and it doesn't need to be replicated so many times.


139
00:08:35,520 --> 00:08:39,920
But anyway, the fact that you have to send it twice is really not good at scale or at


140
00:08:39,920 --> 00:08:41,200
speed.


141
00:08:41,200 --> 00:08:44,400
Bob needs to collateralize.


142
00:08:44,400 --> 00:08:48,560
Filecoin miners are not onboarding data right now because they have such high collateral


143
00:08:48,560 --> 00:08:52,000
needs it makes it really, really hard to onboard.


144
00:08:52,000 --> 00:08:56,360
And the collateral that you need for this protocol, according to Kriptonite Lab simulations,


145
00:08:56,360 --> 00:08:57,520
are very, very high.


146
00:08:57,520 --> 00:09:00,680
There's some other things that weren't simulated.


147
00:09:00,680 --> 00:09:02,080
Alice has to pay middlemen.


148
00:09:02,080 --> 00:09:03,160
They have to run servers.


149
00:09:03,160 --> 00:09:04,160
There's a whole thing.


150
00:09:04,160 --> 00:09:07,960
Are these people gonna make enough money to make it make sense to run this protocol?


151
00:09:07,960 --> 00:09:12,120
There's other problems too about just practicality of this.


152
00:09:12,120 --> 00:09:13,120
But it's a great start.


153
00:09:13,120 --> 00:09:18,680
It is decentralized and it makes sure that retrievals happen without having an army of


154
00:09:18,680 --> 00:09:21,280
bots that are just pinging the Filecoin miners.


155
00:09:21,280 --> 00:09:22,280
Is it up?


156
00:09:22,280 --> 00:09:23,280
Is it up?


157
00:09:23,280 --> 00:09:24,280
Is it up?


158
00:09:24,280 --> 00:09:25,960
Which is what a lot of the solutions that I'm seeing right now are looking like.


159
00:09:25,960 --> 00:09:28,160
So yeah, I like it.


160
00:09:28,160 --> 00:09:31,480
But it's not a CDN.


161
00:09:31,480 --> 00:09:33,700
So this gets a little better.


162
00:09:33,700 --> 00:09:36,700
This is where you have payment drips.


163
00:09:36,700 --> 00:09:40,640
This is like a class of solutions where I do a little work, you do a little payment.


164
00:09:40,640 --> 00:09:41,920
We do that over and over again.


165
00:09:41,920 --> 00:09:44,560
And I have a picture of Friedrich Hayek there.


166
00:09:44,560 --> 00:09:47,320
Because it's local knowledge about what just happened to me.


167
00:09:47,320 --> 00:09:48,320
It's I just got a packet.


168
00:09:48,320 --> 00:09:49,320
Okay, I'm gonna pay.


169
00:09:49,320 --> 00:09:51,520
And it's applied into the market.


170
00:09:51,520 --> 00:09:52,960
There's no outside shared authority.


171
00:09:52,960 --> 00:09:53,960
There's no friction.


172
00:09:53,960 --> 00:09:55,780
There's not a lot of communication needs.


173
00:09:55,780 --> 00:09:56,780
So let's get into that.


174
00:09:56,780 --> 00:10:01,280
Because that's been implemented in Skynet on SIA.


175
00:10:01,280 --> 00:10:02,880
So I independently came up with this.


176
00:10:02,880 --> 00:10:06,760
And then one of my angels for my company is actually the Skynet founder.


177
00:10:06,760 --> 00:10:08,800
And we called about it and went, OMG, we have the same thing.


178
00:10:08,800 --> 00:10:10,560
So it was cool.


179
00:10:10,560 --> 00:10:18,120
So yeah, it's inband incentives over a payment channel that is right next to the transport


180
00:10:18,120 --> 00:10:19,120
layer.


181
00:10:19,120 --> 00:10:21,880
So I send you a packet.


182
00:10:21,880 --> 00:10:23,100
You send me a payment.


183
00:10:23,100 --> 00:10:25,440
We iterate this and iterate this and iterate this.


184
00:10:25,440 --> 00:10:26,440
You get paid.


185
00:10:26,440 --> 00:10:28,200
I forget how I was using you and me.


186
00:10:28,200 --> 00:10:29,280
But the server gets paid.


187
00:10:29,280 --> 00:10:31,400
The client gets their file.


188
00:10:31,400 --> 00:10:36,320
So there's not a lot of trust at any point.


189
00:10:36,320 --> 00:10:40,720
The most trust that I'm giving you is a couple cents.


190
00:10:40,720 --> 00:10:43,140
The most trust that you're giving me is a few packets.


191
00:10:43,140 --> 00:10:47,080
So it's not like we're doing a lot of work for each other without trust.


192
00:10:47,080 --> 00:10:49,160
There's no outside authority.


193
00:10:49,160 --> 00:10:51,720
Yeah, we pay the host directly.


194
00:10:51,720 --> 00:10:54,960
There's no need for extra RTTs to wait.


195
00:10:54,960 --> 00:10:58,760
Because you can just fire off that packet while you're still receiving other data.


196
00:10:58,760 --> 00:10:59,880
It can be in another thread.


197
00:10:59,880 --> 00:11:01,960
It's quite fast.


198
00:11:01,960 --> 00:11:03,480
So why isn't this great?


199
00:11:03,480 --> 00:11:06,200
The middlemen are not being paid for this.


200
00:11:06,200 --> 00:11:11,120
Unless you are doing a situation where there's a paid connection from the origin to a Charlie


201
00:11:11,120 --> 00:11:13,600
and then from a Charlie to the Alice.


202
00:11:13,600 --> 00:11:17,100
And that could work.


203
00:11:17,100 --> 00:11:22,000
But there are a lot more router hops usually that are not caching or keeping the file and


204
00:11:22,000 --> 00:11:25,160
you don't really want to establish that many peer-to-peer channels.


205
00:11:25,160 --> 00:11:26,720
So I don't know.


206
00:11:26,720 --> 00:11:28,920
That needs more work.


207
00:11:28,920 --> 00:11:34,000
Yeah, there's a lot of elliptic curve signatures because you're sending a message that is a


208
00:11:34,000 --> 00:11:35,000
spend.


209
00:11:35,000 --> 00:11:39,160
Elliptic curve signatures, in case you don't know, are slow.


210
00:11:39,160 --> 00:11:40,160
Not network speed.


211
00:11:40,160 --> 00:11:41,160
Not good.


212
00:11:41,160 --> 00:11:42,160
It's not programmable.


213
00:11:42,160 --> 00:11:45,120
You can't give your money to someone else to have them download on your behalf.


214
00:11:45,120 --> 00:11:46,520
And it's not protocol layer.


215
00:11:46,520 --> 00:11:49,240
It has to happen in this like SIA binary.


216
00:11:49,240 --> 00:11:51,640
So it's not like it really only works for SIA.


217
00:11:51,640 --> 00:11:53,760
So it's a really good start, though.


218
00:11:53,760 --> 00:11:59,640
And I linked to two little spots in the massive Skynet code base where you can check out where


219
00:11:59,640 --> 00:12:00,680
they're doing this.


220
00:12:00,680 --> 00:12:02,720
There's a lot more code surrounding this.


221
00:12:02,720 --> 00:12:05,120
But you can kind of get oriented.


222
00:12:05,120 --> 00:12:07,920
It's pretty self-explanatory.


223
00:12:07,920 --> 00:12:09,920
So now, done with prior work.


224
00:12:09,920 --> 00:12:13,280
These are things that I have done.


225
00:12:13,280 --> 00:12:16,480
This is like my little kind of fuzzy research from August.


226
00:12:16,480 --> 00:12:22,080
So you can improve Skynet by making the state channel better.


227
00:12:22,080 --> 00:12:23,720
You set up the state channel.


228
00:12:23,720 --> 00:12:28,640
You post a commitment to, hey, there are some values that I can send.


229
00:12:28,640 --> 00:12:32,800
And when you present one of them, you get, I don't know, like 1% of the prize pool that's


230
00:12:32,800 --> 00:12:35,600
the full value of the state channel.


231
00:12:35,600 --> 00:12:36,920
So I post that commitment.


232
00:12:36,920 --> 00:12:39,320
So maybe it's like a keyed RNG output.


233
00:12:39,320 --> 00:12:40,400
Don't worry about what that is.


234
00:12:40,400 --> 00:12:43,440
Let's just say I post some math.


235
00:12:43,440 --> 00:12:48,520
If you solve the puzzle, each of the 1,000 solutions to the puzzle will give you one


236
00:12:48,520 --> 00:12:49,640
penny.


237
00:12:49,640 --> 00:12:52,640
And we can validate that on chain.


238
00:12:52,640 --> 00:12:59,120
If the client acts, so when I, you know, act a transaction in TCP, I will add one of these


239
00:12:59,120 --> 00:13:04,680
little bits of information that you can prove is a correct solution to the puzzle and get


240
00:13:04,680 --> 00:13:09,040
back out your, you know, get a few pennies.


241
00:13:09,040 --> 00:13:13,400
So yeah, the server will just prove that to close out the channel.


242
00:13:13,400 --> 00:13:19,120
And then they can claim however many packets I sent them little receipts for.


243
00:13:19,120 --> 00:13:22,960
Tagmo is already building state channels on FVVM, which is cool.


244
00:13:22,960 --> 00:13:27,080
And Bitcoin Lightning payment channels already integrate with noise, which is, you know,


245
00:13:27,080 --> 00:13:32,880
WireGuard, that's the transport layer that I'm suggesting that we should use later on.


246
00:13:32,880 --> 00:13:38,720
Yeah, so you can also, yeah, you can ramp up over, you can build trust over time with


247
00:13:38,720 --> 00:13:40,360
this, which is cool.


248
00:13:40,360 --> 00:13:43,160
We can start by having you pay me one packet, I pay you one penny.


249
00:13:43,160 --> 00:13:47,960
And we can, you know, as we keep on with the connection, we can have you give me five packets.


250
00:13:47,960 --> 00:13:50,520
I give you five cents.


251
00:13:50,520 --> 00:13:54,960
That will reduce overhead for UDP based protocols where you don't already have the ACK.


252
00:13:54,960 --> 00:13:59,440
For the TCP ACK, you can just kind of append this, you know, little checks on monopoly


253
00:13:59,440 --> 00:14:00,640
money to the end.


254
00:14:00,640 --> 00:14:07,400
And it comes for not free, but like a couple of bytes, which is not so bad.


255
00:14:07,400 --> 00:14:08,400
That's just a thought.


256
00:14:08,400 --> 00:14:12,000
That's something that someone would have to model, not me.


257
00:14:12,000 --> 00:14:13,960
Weird new topologies of Skynet incentives.


258
00:14:13,960 --> 00:14:17,540
You could do an onion routing thing where you append, you know, a whole bunch of hashes


259
00:14:17,540 --> 00:14:19,480
that are claimable by intermediaries.


260
00:14:19,480 --> 00:14:23,440
I don't know how you would prove that each person only took one.


261
00:14:23,440 --> 00:14:27,160
But this would mean that you can pay people who are message passing, but not necessarily


262
00:14:27,160 --> 00:14:31,400
caching and originating the entire file without them having to establish a payment channel.


263
00:14:31,400 --> 00:14:35,240
I think this is something that requires someone else thinking about it, not me.


264
00:14:35,240 --> 00:14:39,080
But another interesting one is maybe when, like, Netflix initiates a connection with


265
00:14:39,080 --> 00:14:43,000
you, it comes from their server, and they also give you, like, a little ticket to say


266
00:14:43,000 --> 00:14:47,640
you're allowed to download this from someone else, and we'll pay for your bandwidth.


267
00:14:47,640 --> 00:14:50,520
The payment channel kind of allows that delegation.


268
00:14:50,520 --> 00:14:55,760
Obviously, like, checking to see who or what they're paying for, you know, who they're


269
00:14:55,760 --> 00:14:58,000
paying is easy to enforce on chain.


270
00:14:58,000 --> 00:15:01,880
What they're paying for gets you back to that same, like, we can't validate what just happened


271
00:15:01,880 --> 00:15:02,880
point to point.


272
00:15:02,880 --> 00:15:07,960
So I could ask for bunnies.jpg, and you want to subsidize me getting bunnies.jpg, but actually


273
00:15:07,960 --> 00:15:11,840
I get cats.jpg from the same person, and there's nothing you can do about that.


274
00:15:11,840 --> 00:15:15,660
So if you didn't want that to happen, that's, you know, a you problem.


275
00:15:15,660 --> 00:15:20,320
You could also do this with the permissioning to download content from a third party.


276
00:15:20,320 --> 00:15:25,960
So like the JWT for getting bunnies or cats.jpg could come with this, like, download coupons


277
00:15:25,960 --> 00:15:26,960
for bandwidth.


278
00:15:26,960 --> 00:15:27,960
I don't know.


279
00:15:27,960 --> 00:15:28,960
Could be a nice workflow.


280
00:15:28,960 --> 00:15:29,960
This is all very, like, vague.


281
00:15:29,960 --> 00:15:33,240
The past two slides have been.


282
00:15:33,240 --> 00:15:34,240
Yeah.


283
00:15:34,240 --> 00:15:36,520
Obviously, that's also kind of gameable.


284
00:15:36,520 --> 00:15:37,520
So yeah.


285
00:15:37,520 --> 00:15:38,520
I don't know.


286
00:15:38,520 --> 00:15:39,520
Requires more work.


287
00:15:39,520 --> 00:15:40,520
Anyway.


288
00:15:40,520 --> 00:15:45,960
In-band incentives look like a generalized multi-armed bandit problem.


289
00:15:45,960 --> 00:15:48,880
If you're not an econ person, this isn't targeted at you.


290
00:15:48,880 --> 00:15:52,400
And it's also iterated prisoner's dilemma, and the reason that that is is, like, the


291
00:15:52,400 --> 00:15:57,160
shape of this problem is Bob has a lot of clients that it could serve data to, fixed


292
00:15:57,160 --> 00:16:00,160
bandwidth, it wants to make as much money as possible.


293
00:16:00,160 --> 00:16:05,320
Switching clients is a bit of a warmup cost for many networking reasons and also for establishing


294
00:16:05,320 --> 00:16:07,800
trust reasons, like, is this person just not going to pay me?


295
00:16:07,800 --> 00:16:11,760
And it can stop serving and betray the trust at any point.


296
00:16:11,760 --> 00:16:16,200
Alice kind of has the same problem, except she has, you know, on her end an incentive


297
00:16:16,200 --> 00:16:17,360
to actually get the data.


298
00:16:17,360 --> 00:16:18,360
So she actually cares.


299
00:16:18,360 --> 00:16:22,000
So that's kind of the thing that's, like, backstopping all the movement on this market.


300
00:16:22,000 --> 00:16:26,720
But what's really cool about this is it naturally incentivizes replication for data that is in


301
00:16:26,720 --> 00:16:28,920
high demand.


302
00:16:28,920 --> 00:16:30,560
Alice wants her data as quickly as possible.


303
00:16:30,560 --> 00:16:35,520
If I'm a server in New York and right now I'm seeing her go through my node trying to


304
00:16:35,520 --> 00:16:40,520
pull a video from Europe, I can say, okay, I'm going to download a copy of that and just


305
00:16:40,520 --> 00:16:44,480
serve it to her for me and then she'll pay me more than she would pay Europe or pay me


306
00:16:44,480 --> 00:16:47,680
the same amount because she can have lower latencies.


307
00:16:47,680 --> 00:16:49,400
Yeah.


308
00:16:49,400 --> 00:16:52,000
So that's cool.


309
00:16:52,000 --> 00:16:55,200
There's a problem with this.


310
00:16:55,200 --> 00:17:00,400
Like Alice's are unlikely to start a cartel because as I mentioned on the last slide,


311
00:17:00,400 --> 00:17:01,880
Alice's have this real demand for the data.


312
00:17:01,880 --> 00:17:03,520
Like I actually want my data.


313
00:17:03,520 --> 00:17:06,800
I want it for as cheap as possible, but I really do want to see, you know, like my friend's


314
00:17:06,800 --> 00:17:09,640
vacation pictures.


315
00:17:09,640 --> 00:17:12,740
And I don't really have any leverage over Alice because, you know, if Bob has a lot


316
00:17:12,740 --> 00:17:14,760
of data, he has a lot of opportunities to profit.


317
00:17:14,760 --> 00:17:18,160
So if I'm being silly on my end, he's just going to cut the connection and go work with


318
00:17:18,160 --> 00:17:20,440
someone who will actually pay him.


319
00:17:20,440 --> 00:17:25,560
If Bob is not decentralized enough, though, if there are only one or two copies of this


320
00:17:25,560 --> 00:17:30,640
file on the entire network, there is no competition for prices and Bob will just kind of raise


321
00:17:30,640 --> 00:17:35,200
the rent to infinity on Alice's data, refuse to serve to Alice, refuse to serve to anyone


322
00:17:35,200 --> 00:17:37,360
trying to make a replica.


323
00:17:37,360 --> 00:17:41,920
If you just take Skynet, like the in-band incentives that I talked about, and mix them


324
00:17:41,920 --> 00:17:44,800
with Filecoin storage incentives, this is still a problem.


325
00:17:44,800 --> 00:17:48,360
So I mean, Bob is, he's forced to keep it.


326
00:17:48,360 --> 00:17:53,200
He's forced to, or he has this like, you know, carrot, like market to serve it, but he doesn't


327
00:17:53,200 --> 00:17:59,840
have any stick saying you can't just hold onto it and say it costs $100 per packet.


328
00:17:59,840 --> 00:18:02,560
But we can fix this by gluing everything together.


329
00:18:02,560 --> 00:18:06,200
I'm sorry in advance for this slide.


330
00:18:06,200 --> 00:18:10,240
So to fix this, you have storage incentives to make sure that they're keeping the data


331
00:18:10,240 --> 00:18:11,600
with collateral slashing.


332
00:18:11,600 --> 00:18:14,160
You have retrieve style, you have to make this retrievable.


333
00:18:14,160 --> 00:18:18,940
And that's especially important for rare files that are not frequently retrieved.


334
00:18:18,940 --> 00:18:21,920
So it's not like a huge profit for me to keep this hot.


335
00:18:21,920 --> 00:18:26,800
But you know, if you want me to keep the file hot, pay me to do so and pay me enough that


336
00:18:26,800 --> 00:18:29,160
it's worth it for me to collateralize.


337
00:18:29,160 --> 00:18:35,920
And then add the Skynet style thing to induce competition across, you know, all of the SPs


338
00:18:35,920 --> 00:18:37,520
participating in the CDN.


339
00:18:37,520 --> 00:18:39,120
I mentioned Saturn here.


340
00:18:39,120 --> 00:18:42,080
Saturn should use this in a couple of years.


341
00:18:42,080 --> 00:18:46,000
And then that means that the file is kept at multiple collateralized locations.


342
00:18:46,000 --> 00:18:50,800
Some people are directly collateral slashing enforced responsible for serving it.


343
00:18:50,800 --> 00:18:55,720
And it's accessible quickly if people are willing to pay for it to be accessible quickly,


344
00:18:55,720 --> 00:18:58,760
because everyone is competing for client bandwidth payments.


345
00:18:58,760 --> 00:19:06,240
The market will pull new geo localized points of presence replications, you know, from the


346
00:19:06,240 --> 00:19:08,800
ether from the incentives.


347
00:19:08,800 --> 00:19:11,680
And then back to that slide at the start, add bow.


348
00:19:11,680 --> 00:19:16,240
So this is, you know, add or just below the application layer for streaming applications.


349
00:19:16,240 --> 00:19:21,000
Or if you're sending large files, you should be validating it as you go.


350
00:19:21,000 --> 00:19:25,520
Perhaps I don't really know if application layer is necessarily right, because you need


351
00:19:25,520 --> 00:19:29,080
to like not pay them if they're sending you junk data.


352
00:19:29,080 --> 00:19:31,240
So I'm not really sure where in the stack that should go.


353
00:19:31,240 --> 00:19:32,240
Yeah.


354
00:19:32,240 --> 00:19:33,240
So I said application layer.


355
00:19:33,240 --> 00:19:35,120
But yeah, I'm not convinced.


356
00:19:35,120 --> 00:19:37,040
In band incentives to WireGuard.


357
00:19:37,040 --> 00:19:41,920
The WireGuard has every five minutes, they renegotiate the, you know, keys and the handshake.


358
00:19:41,920 --> 00:19:45,040
So that's a perfect place to stick a state channel because you're doing that expensive


359
00:19:45,040 --> 00:19:52,080
blockchain transaction eventually for the closeout for the and for the creation.


360
00:19:52,080 --> 00:19:54,000
Yeah, actually.


361
00:19:54,000 --> 00:19:55,960
And you have to do a whole bunch of elliptic curve stuff.


362
00:19:55,960 --> 00:20:24,600
So that should be in the thread with the state channel creation.


363
00:20:00,000 --> 00:20:00,000
PUB


364
00:20:17,540 --> 00:20:20,080
you just stick stuff on the end of the act and it's pretty cheap.


365
00:20:20,080 --> 00:20:25,640
It's like, you know, the establishment commitment is


366
00:20:25,640 --> 00:20:28,440
Yeah, I mean, you could like standardize it and like ZK,


367
00:20:28,440 --> 00:20:58,400
I'd like just stick that in a ZK proof that all of these things are


368
00:20:58,400 --> 00:21:19,160
ticks.


369
00:21:28,400 --> 00:21:33,360
from the first slide and then you win and you're very happy and you have a CDN.


370
00:21:33,920 --> 00:21:38,800
So yeah, I wanted to cover upload very, very quickly.


371
00:21:40,960 --> 00:21:45,600
Yeah, so upload, like the carrot where you're trying to get speed is the same,


372
00:21:45,600 --> 00:21:50,320
like you just use the same protocol. They'll backstop to prevent the catastrophic case.


373
00:21:50,320 --> 00:21:54,080
You just have Bob post like a Filecoin deal or a Retrieve deal or some kind of


374
00:21:54,080 --> 00:21:59,680
like contractual SLA looking commitment to make sure that he's going to start publicly


375
00:21:59,680 --> 00:22:03,200
proving that he got the deal or he's going to get slashed. So now he wants the deal and now


376
00:22:03,200 --> 00:22:08,640
we just do the transfer Skynet style protocol. It might be Alice might upload it for free.


377
00:22:08,640 --> 00:22:14,320
She might subsidize the bandwidth, who knows. But yeah, you can incentivize the initial


378
00:22:14,880 --> 00:22:22,000
storage contractual replications by just doing Filecoin replication deals. We all know how to do


379
00:22:22,000 --> 00:22:29,840
that. Cool. These were some cool vague thoughts. What's next? I'd love to hear criticism in the


380
00:22:29,840 --> 00:22:35,920
comments section. If like you have criticism of like the vague ideas here, love to hear it.


381
00:22:36,720 --> 00:22:42,000
But concretely, if we wanted to move on these kinds of ideas, there is a lot lacking here.


382
00:22:42,000 --> 00:22:46,400
This was a very vague talk. I did this in about a week in last August and


383
00:22:46,400 --> 00:22:51,760
then dropped these slides in one week. So yeah, two great starting points for work on this. If


384
00:22:51,760 --> 00:22:57,280
anyone has like the budget to hire like a smart older undergrad intern or like maybe a grad student


385
00:22:57,280 --> 00:23:02,320
in like distributed systems or mechanism design, the tit for tat incentive layer, like the Skynet


386
00:23:02,320 --> 00:23:07,040
style incentives, modeling that with CAD-CAD strapped onto Nikola's Retrieve protocol,


387
00:23:07,040 --> 00:23:11,920
possibly model Filecoin as well. Think about realistic bandwidth costs, replication costs,


388
00:23:11,920 --> 00:23:17,200
cost of capital, different demand flows across different continents. This would be a pretty


389
00:23:17,200 --> 00:23:22,080
involved model, but it would be very good to have and good to see what prices could start looking


390
00:23:22,080 --> 00:23:27,520
like under different assumptions. So that's thing one. Retrieve already has some modeling in it in


391
00:23:27,520 --> 00:23:32,400
their like light paper, which is great and everyone in the room should read it. It's pretty cool.


392
00:23:32,960 --> 00:23:38,320
The other thing that would be cool is like a test implementation of strapping like the


393
00:23:38,320 --> 00:23:43,600
hash-based Monopoly money straight channel onto, did I say straight channel? State channel,


394
00:23:44,320 --> 00:23:49,360
onto an existing WireGuard or maybe NoiseQuick. I don't know. Martin was like,


395
00:23:49,360 --> 00:23:52,720
NoiseQuick doesn't work that way. I'm only familiar with WireGuard, so I don't know.


396
00:23:52,720 --> 00:23:58,240
But seeing how fast you can get this thing going would be cool under different like block time and


397
00:23:58,240 --> 00:24:02,560
blockchain congestion assumptions for the payments. Like how much can you do out of band? How much


398
00:24:02,560 --> 00:24:07,520
can you defer to later? WireGuard has this nice timer system that I talked about for the transport


399
00:24:07,520 --> 00:24:12,960
channel renegotiation and it already has like an extra thread for handling the expensive elliptic


400
00:24:12,960 --> 00:24:17,040
curve ops. So I think that it's a really good code base to try adding this into. It's also


401
00:24:17,040 --> 00:24:22,640
already in the Linux kernel. It goes very fast. But yeah, like just seeing is this implementable?


402
00:24:22,640 --> 00:24:29,440
How bad does it bog down the networking? Could it actually be used in prod? Yeah, it would be a cool


403
00:24:29,440 --> 00:24:34,560
research internship project if anyone here is interested in pursuing this. In my opinion,


404
00:24:34,560 --> 00:24:41,600
those are the next steps. Okay. That was my talk. That was less anxiety-inducing than I thought.


405
00:24:41,600 --> 00:24:53,600
Anyway, if you have questions. Anyone? Am I scot-free? Oh, Alex.


406
00:24:53,600 --> 00:25:05,960
For these state channel payments, I might not totally understand. Is there a mitigation to


407
00:25:05,960 --> 00:25:11,480
somebody just being like, oh, give me, let me request a file at different offsets from like


408
00:25:11,480 --> 00:25:15,320
a hundred different peers. And then never pay? Yeah. Yeah. I mean, that would be really,


409
00:25:15,320 --> 00:25:21,400
really expensive on their end. You can't really stop a start of connection attacks, depending on


410
00:25:21,400 --> 00:25:25,560
who's like, so every time that you make a payment, you're basically like, put it, it's a little


411
00:25:25,560 --> 00:25:28,600
trust, you know, like we're, we're taking out a little loan and you're going to pay it back. We're


412
00:25:28,600 --> 00:25:33,960
taking out a little loan and you're going to pay it back. So at the start, when there's no


413
00:25:33,960 --> 00:25:41,560
continued, like iterated prison, or when there's, you know, nothing yet, no trust yet, that's a


414
00:25:41,560 --> 00:25:45,560
dangerous time. And at the end of the connection is also a very dangerous time because we could


415
00:25:45,560 --> 00:25:51,240
just be like, oh, like, I don't have to trust you to send five more packets. I'm just not going to


416
00:25:51,240 --> 00:25:56,120
send the rest. But like, really the amount of like loans and these connections is like very,


417
00:25:56,120 --> 00:26:00,920
very small. Theoretically you could get it for free. Like if you just initiate a jillion


418
00:26:00,920 --> 00:26:05,080
connections with a bunch of different people, but yeah, that's like very expensive and it's not


419
00:26:05,080 --> 00:26:10,040
that weighty an attack on the service providers because it's going to be so cheap anyway. Like,


420
00:26:10,040 --> 00:26:16,360
it's like nearly free. So like, yes, you can do that. It would be super slow and it would be like


421
00:26:16,360 --> 00:26:22,280
a mosquito bite level of bad for the network is basically, yeah. Yeah. So you'd probably already


422
00:26:22,280 --> 00:26:27,800
have protection in place for something like that. Well, you don't even, I mean, you need to see what


423
00:26:27,800 --> 00:26:32,200
the model would say, but I don't think there even needs to be protection for that because the,


424
00:26:32,200 --> 00:26:36,840
if you're doing it to the starter connection, the SPs would shut things down pretty quickly when


425
00:26:36,840 --> 00:26:43,000
they realized that you're not paying and it would be like minimal overhead. And then if you're doing


426
00:26:43,000 --> 00:26:47,480
it at the end of the connection where someone just stops paying or someone just stopped sending


427
00:26:47,480 --> 00:26:52,280
packets, I mean, I was texting with an economist friend about this and we were both just like,


428
00:26:52,280 --> 00:26:55,960
yeah, people would just post on Reddit, like don't connect to this peer. You should blacklist them in


429
00:26:55,960 --> 00:27:00,920
your router because they just truncate the file six bytes or six packets before it's over. Like,


430
00:27:00,920 --> 00:27:05,880
that's like, just don't use them. And it would be pretty like, I don't know, like people just


431
00:27:05,880 --> 00:27:10,280
wouldn't do that because there'd be out of band reputational mechanisms for that. But you could


432
00:27:10,280 --> 00:27:14,440
also just initiate a new connection with someone else to get specifically the last three packets.


433
00:27:14,440 --> 00:27:18,600
If a service provider started trying to screw you out of things. Yeah.


434
00:27:19,720 --> 00:27:21,880
I had another question, but I forgot it.


435
00:27:27,480 --> 00:27:28,760
Am I safe? Am I done?


436
00:27:28,760 --> 00:27:43,640
You may have already covered this for, okay. So where would you like these solutions to live?


437
00:27:43,640 --> 00:27:47,800
Like, I know we talked about, like when we were thinking about this, our referees were chain,


438
00:27:47,800 --> 00:27:56,760
like oracles. Do you, with the developments in FV, if VM, IPVM, like, like just like generally,


439
00:27:56,760 --> 00:28:00,760
where do you think this solution fits into the architecture that we've been talking about for


440
00:28:00,760 --> 00:28:07,240
the past week here? Yeah. So Saturn, obviously. I think there needs to be work on the lib P2P team,


441
00:28:08,520 --> 00:28:11,960
making this fit into the transport layer. Cause you can't just have one client tool


442
00:28:12,760 --> 00:28:17,080
and absolutely one applet, like a grand total of one application that uses the CDN thing. Cause


443
00:28:17,080 --> 00:28:22,040
this like really benefits from economics of scale. So switching out a transport to a paid transport


444
00:28:22,040 --> 00:28:27,480
would be really, really good, which is why I think wire guard is super prime. You could do it in TCP


445
00:28:27,480 --> 00:28:32,600
too. I think that that would require a bit more modification and would be a little bit harder to


446
00:28:32,600 --> 00:28:35,880
make compatible than wire guard just because of like the state of the internet and the state of


447
00:28:35,880 --> 00:28:40,680
the network. Magmos state channels. I haven't looked into them in detail, but I think that


448
00:28:40,680 --> 00:28:47,240
they would be pretty good. The FVM is yeah. Like helpful for this, like the programmability,


449
00:28:47,240 --> 00:28:53,640
like could probably be like hard coded. And just everyone's using basically the same state channel


450
00:28:53,640 --> 00:28:58,760
over and over again. But yeah, Bitcoin lightning does basically exactly this. So it shouldn't be


451
00:28:58,760 --> 00:29:04,040
too hard. So basically, yes, the primitives you need are a little bit of protocol work,


452
00:29:04,040 --> 00:29:11,720
make it work with Saturn. And I guess you'd have to deploy the retrieval pinning network if you


453
00:29:11,720 --> 00:29:17,560
want that as a backstop, if you're worried about that, like preventing the data hostage situation.


454
00:29:17,560 --> 00:29:23,320
And then yeah, state channels and that should do it in terms of engineering work. But I reiterate,


455
00:29:23,320 --> 00:29:24,840
there should be some modeling work first.


456
00:29:31,400 --> 00:29:35,400
What are the properties that you're trying to get with wire guard or with a noise thing?


457
00:29:35,400 --> 00:29:41,800
I mean, so it has like encryption, which is cool, but that's not really relevant. What's


458
00:29:41,800 --> 00:29:47,400
really relevant is they've got the code already written to renegotiate a something every five


459
00:29:47,400 --> 00:29:53,720
minutes and then do very fast, slightly modified, like transport on the inside.


460
00:29:53,720 --> 00:29:57,480
Do you just need like an in-band tag after every packet? Is that the


461
00:29:58,360 --> 00:29:59,160
thing you're doing on your transport?


462
00:29:59,160 --> 00:30:06,760
That's one option. You can append it to the TCP acts or you can just send extra UDP acts that are


463
00:30:06,760 --> 00:30:11,960
like channel messages, like control messages or something. I'm familiar with the wire guard code


464
00:30:11,960 --> 00:30:16,600
base and it just really struck me as a good place to put this, but that's super flexible


465
00:30:16,600 --> 00:30:20,920
and open to other suggestions. But yeah, the properties are just like renegotiate payment


466
00:30:20,920 --> 00:30:25,160
channel, strap it into the protocol, which is already like a weird protocol because using


467
00:30:25,160 --> 00:30:28,680
you know, freak TCP is not going to be a thing that your ISP is super into.


468
00:30:29,560 --> 00:30:35,080
I guess I'm wondering if you made a parallel like libpdp stream that was then sort of an


469
00:30:35,080 --> 00:30:36,680
out of band. Yeah, that would...


470
00:30:36,680 --> 00:30:41,240
Side thing of tags getting sent where they're not necessarily guaranteed to be


471
00:30:41,240 --> 00:30:45,400
exactly interleaved in the same way because there's some potential revixing.


472
00:30:45,400 --> 00:30:45,880
Yeah.


473
00:30:45,880 --> 00:30:50,360
Is that problematic? Does it need to be really strictly against bytes or...


474
00:30:50,360 --> 00:30:59,320
So I don't see an immediate problem with that. I want to think about it more before I give a hard


475
00:30:59,320 --> 00:31:06,440
answer. I think that having it... I don't know. I think that having the connections suffer together


476
00:31:06,440 --> 00:31:10,760
when you're doing an incentive mechanism, if the connection suffering is probably kind of smart,


477
00:31:10,760 --> 00:31:15,080
because it's like, oh, I haven't gotten any payments, but I also haven't gotten any packets.


478
00:31:15,080 --> 00:31:20,760
I don't... Yeah, I don't think that the acts should be ordered if you're doing like a UDP


479
00:31:20,760 --> 00:31:24,120
protocol, like obviously you should not put ordering where there is not ordering.


480
00:31:25,320 --> 00:31:31,480
So that shouldn't matter for like a UDP. It might matter for a TCP where you were trying to have


481
00:31:31,480 --> 00:31:35,240
stricter guarantees. But again, I think that this protocol is going to be very fast. Everything's


482
00:31:35,240 --> 00:31:38,040
going to be very fuzzy in terms of when you're getting the acts.


483
00:31:38,040 --> 00:31:43,800
If you want to keep the amount of data that you pay for that you haven't received yet as small


484
00:31:43,800 --> 00:31:48,040
as possible, which I assume you want to do, it would make sense to integrate this with the


485
00:31:48,040 --> 00:31:55,000
transport and basically give the peer a... only pay for the next congestion window of data,


486
00:31:55,560 --> 00:31:59,320
or then to account for packet loss, maybe two congestion windows of data.


487
00:31:59,320 --> 00:32:00,760
So I agree.


488
00:32:00,760 --> 00:32:02,520
Maybe just do it as a quick answer.


489
00:32:02,520 --> 00:32:08,760
Yeah, I agree. I just, I think it's going to be really problematic for adoption if people are


490
00:32:08,760 --> 00:32:13,400
like, oh, I didn't get my payment in time. I'm going to kill it really, really fast. Like,


491
00:32:13,400 --> 00:32:17,160
I think people should be reluctant to kill the connection for non-payment is probably


492
00:32:17,160 --> 00:32:21,400
the correct behavior. But again, we need modeling work to like properly know. Like, I think it


493
00:32:21,400 --> 00:32:26,120
should be very not strict. Like you should have to get pretty in debt before you can actually


494
00:32:26,120 --> 00:32:28,440
get the connection. And I think that's a good thing.


495
00:32:28,440 --> 00:32:32,840
I think it should be very not strict. Like you should have to get pretty in debt before,


496
00:32:32,840 --> 00:32:35,960
like once you've really established the connection, you've been like paying, okay,


497
00:32:35,960 --> 00:32:38,920
you should have to get pretty in debt before the service provider cuts you off.


498
00:32:40,760 --> 00:32:44,520
It was just my instinct about usability. I have absolutely nothing to back this up.


499
00:32:44,520 --> 00:32:47,800
So yeah. Anything else?


500
00:32:47,800 --> 00:32:57,320
Cool. Thank you guys for listening.
