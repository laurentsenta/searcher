1
00:00:00,000 --> 00:00:10,000
Hello everyone. And it's really wonderful feeling being here and also delightful for


2
00:00:10,000 --> 00:00:15,720
the major reason being that I see a lot of people sharing the same ideas, headed towards


3
00:00:15,720 --> 00:00:21,480
same direction, and that's quite interesting and give me a lot of motivation to move forward.


4
00:00:21,480 --> 00:00:30,000
About me, I'm Dilip from India and based in Stockholm, core member of JSPM, JavaScript


5
00:00:30,000 --> 00:00:36,080
Package Manager, and currently trying to found a company called Logon. On the internet, I


6
00:00:36,080 --> 00:00:43,280
can be found as a user of Fusion Strings. And the agenda today is we are going to talk


7
00:00:43,280 --> 00:00:51,400
about import map, what they are, and what are the challenges in web development in general,


8
00:00:51,400 --> 00:00:58,200
but particularly for front-end development. What are the pressing issues? How JSPM has


9
00:00:58,200 --> 00:01:04,200
already addressed those challenges and how plans to do them in future? And what is Logon,


10
00:01:04,200 --> 00:01:10,680
what it is set up to do? And conclusion, basically, what next?


11
00:01:10,680 --> 00:01:17,040
So before we begin, I think it is important to get in right frame of mindset. And that


12
00:01:17,040 --> 00:01:23,320
brings me to this vague but interesting initial proposal which Tim Berners-Lee proposed initially


13
00:01:23,320 --> 00:01:33,320
when he proposed initial draft of web2b. That also gave birth to HTML, kind of origin story


14
00:01:33,320 --> 00:01:42,880
of HTML begins there. But on wide or bird-eye view, it also gives kind of a lightweight


15
00:01:42,880 --> 00:01:51,120
platform for people to build and share information and abstract away a lot of complications from


16
00:01:51,120 --> 00:01:58,640
setting up server or how do something. But not that is not just enough. It is mainly


17
00:01:58,640 --> 00:02:04,960
information management concept. That means how we share information by linking one piece


18
00:02:04,960 --> 00:02:10,200
of data to another piece. Having said that, let's jump in.


19
00:02:10,200 --> 00:02:16,840
What are import maps? So basically these are import maps are new web standards and recently


20
00:02:16,840 --> 00:02:26,160
became available in all major browsers out of the box support. And one way to imagine


21
00:02:26,160 --> 00:02:33,000
about import maps is that these are native, web native package.json. Package.json is something


22
00:02:33,000 --> 00:02:39,480
which we use in Node.js to manage dependencies to pull in from NPM or any other similar public


23
00:02:39,480 --> 00:02:46,480
registries to fetch JavaScript dependencies to build front-end applications for the web.


24
00:02:46,480 --> 00:02:53,920
And how import maps work is that we can imagine them as plain JSON objects. Key is any module


25
00:02:53,920 --> 00:03:03,600
identifier, specifier, and value is any resolvable URL for those modules.


26
00:03:03,600 --> 00:03:09,280
And then how do we use import maps? But before we proceed, we need to compare them how we


27
00:03:09,280 --> 00:03:15,040
build for front-end or web in general today. So as we see, it is kind of continuous cycle


28
00:03:15,040 --> 00:03:19,800
between fetching your source code, building on local, pushing, and again, rebuilding for


29
00:03:19,800 --> 00:03:26,400
preview. Then once again, rebuilding again for production. That means every time we make


30
00:03:26,400 --> 00:03:32,160
a change, we have to rebuild. Every time we make that application available to a new environment,


31
00:03:32,160 --> 00:03:36,920
we have to rebuild. And the root cause behind that is like because


32
00:03:36,920 --> 00:03:45,520
we need to use NPM and Node.js, which is primarily a backend or server-side solution. And there


33
00:03:45,520 --> 00:03:52,920
is a lack of web native solution which can run in browser in general. So we plan to get


34
00:03:52,920 --> 00:04:00,680
rid of both of them, hopefully someday. And about JSPM, what is the context here?


35
00:04:00,680 --> 00:04:06,960
JSPM is JavaScript Package Manager, has been around for quite some time. Lesser known,


36
00:04:06,960 --> 00:04:14,840
but still it has a niche user base. It has pivoted quite a lot of time, but in current


37
00:04:14,840 --> 00:04:24,520
shape and form, it is basically an organization, a foundation, where we are set out to support


38
00:04:24,520 --> 00:04:30,640
front-end development, to be precise, standard compliant front-end development by creating


39
00:04:30,640 --> 00:04:36,120
toolings which are missing in the landscape of users for several reasons.


40
00:04:36,120 --> 00:04:43,640
One being standards are also picking up a lot of speed. A lot of new standards are getting


41
00:04:43,640 --> 00:04:50,200
into the specs, and there are no concrete implementations for them. So there is a hard


42
00:04:50,200 --> 00:04:57,040
need of having some kind of tooling or ecosystem which can support web or browser native tooling


43
00:04:57,040 --> 00:05:07,960
that JSPM does. And it does it by providing a CDN which can kind of fetch dependencies,


44
00:05:07,960 --> 00:05:15,320
prebuilt dependencies from NPM and make it available in the browser using different kinds


45
00:05:15,320 --> 00:05:22,520
of solutions. It has a JSPM library, HTTP API, and a CLI as well. Using that, we can


46
00:05:22,520 --> 00:05:28,480
kind of generate dependencies for any front-end applications.


47
00:05:28,480 --> 00:05:34,960
It also has the ability to parse HTML as an input and then generate another HTML which


48
00:05:34,960 --> 00:05:44,680
has all the dependencies scanned and injected. This is one example, and using this QR code,


49
00:05:44,680 --> 00:05:48,240
we can go to the live page where we can kind of play around with this work in progress


50
00:05:48,240 --> 00:05:58,080
sandbox generator. Here we can see we have some code, but there is no reference to from


51
00:05:58,080 --> 00:06:05,840
where it can fetch these dependencies. And using JSPM generator, we can see that it has


52
00:06:05,840 --> 00:06:12,720
generated automatically the import map and also added them, including integrity hash


53
00:06:12,720 --> 00:06:20,560
into the HTML. And this is ready to be deployed immediately, instantly.


54
00:06:20,560 --> 00:06:27,560
How it works. It works by using, say, JSPM CLI, one option to do it, by providing simple


55
00:06:27,560 --> 00:06:37,800
and very memorable options, just using command line. And there are a lot of variations. Probably


56
00:06:37,800 --> 00:06:45,040
heading towards docs is a good idea. And when we run this previous command, here we are


57
00:06:45,040 --> 00:06:54,080
basically what we are doing is that pointing JSPM towards one kind of skeleton, app.html,


58
00:06:54,080 --> 00:07:01,080
and then installing lit, which is a front-end development library. And we want the output


59
00:07:01,080 --> 00:07:06,280
to comply with environment browser and production. There are several other options available,


60
00:07:06,280 --> 00:07:13,160
like Geno and development environment, for example. And it will generate this kind of


61
00:07:13,160 --> 00:07:20,160
HTML. Where we can see that even though we just mentioned lit, but it scanned all the


62
00:07:20,160 --> 00:07:27,240
sub-dependencies, inline them using one short URL. That means no more heavy node modules


63
00:07:27,240 --> 00:07:34,080
on your system. Then how it works currently. So, when any


64
00:07:34,080 --> 00:07:41,080
publisher publishes their JavaScript packages to NPM public registry, then JSPM builder,


65
00:07:41,080 --> 00:07:50,000
which is a code base, which runs on Google Cloud, it watches the NPM couch base and immediately


66
00:07:50,000 --> 00:07:55,720
builds using rollup. Basically, it is the same process which every developer does with


67
00:07:55,720 --> 00:08:00,760
every change, but it needs to be done only once, if we think about it. So, that is what


68
00:08:00,760 --> 00:08:09,680
precisely JSPM does, and then uploads it to JSPM CDN. And through that, it is available.


69
00:08:09,680 --> 00:08:16,520
Then what is the context of IPFS here? Because we seem to have solved the problem. Because


70
00:08:16,520 --> 00:08:24,080
IPFS, even though kind of tries to solve a lot of problems for decentralized world, but


71
00:08:24,080 --> 00:08:29,500
somehow when it comes to front-end development, specifically for IPFS, we fall back once again


72
00:08:29,500 --> 00:08:38,720
that loop of Git, NPM, Git, NPM. So, even though IPFS is totally capable of doing everything


73
00:08:38,720 --> 00:08:46,320
natively, it still has to go there. And that we can kind of solve. We can get rid of tooling,


74
00:08:46,320 --> 00:08:53,400
which we no longer need. And how we do it, because, say, in general,


75
00:08:53,400 --> 00:09:00,440
I mean, we say three problems, two problems. But naming and caching, cache invalidation,


76
00:09:00,440 --> 00:09:07,360
to be precise, has been very hard problems for so long. As far as it has become kind


77
00:09:07,360 --> 00:09:14,280
of meme. CID is set out to solve both of the problem, because CIDs can be treated as name,


78
00:09:14,280 --> 00:09:20,000
concrete names, URLs, and if you have concrete names and URLs, cache invalidation is not


79
00:09:20,000 --> 00:09:25,080
a thing anymore. And that actually circles back to HTML philosophy. That means like getting


80
00:09:25,080 --> 00:09:32,280
rid of things which we can get rid of. And by this, using CIDs as a concrete identifier


81
00:09:32,280 --> 00:09:42,400
to things, we can get rid of these problems. How JSPM and IPFS works is that JSPM is basically


82
00:09:42,400 --> 00:09:50,680
capable of importing dependency directly from any URL, HTTP or IPFS, both. And once we have


83
00:09:50,680 --> 00:09:55,800
basically downloaded the dependencies, we do not need to actually build it until or


84
00:09:55,800 --> 00:10:02,240
unless we do not have a syntax error. So if any frontend project, in general, there is


85
00:10:02,240 --> 00:10:07,520
a chance JSX is used or several other kind of build optimization need to be done.


86
00:10:07,520 --> 00:10:11,520
So first of all, they are not needed. But even if they are needed, they need to be done


87
00:10:11,520 --> 00:10:18,560
only once and deploy only once because it is IPFS and everything is deduplicated. And


88
00:10:18,560 --> 00:10:26,880
also JSPM provides pre-built dependencies. So this is basically the convergence between


89
00:10:26,880 --> 00:10:36,040
IPFS and JSPM. And for resolving IPFS dependencies, we need to use a JSPM library. And this is


90
00:10:36,040 --> 00:10:41,960
how it works. We import it. There are several other options to configure it, but this one


91
00:10:41,960 --> 00:10:46,800
is used so that the dependencies are resolved relative to the HTML page where things are


92
00:10:46,800 --> 00:10:54,640
being imported. And then we pass any CID and it will basically generate the import map.


93
00:10:54,640 --> 00:11:03,040
I did not. OK, let's do this. So this is a demo. I'm not sure how much it will be a reflection


94
00:11:03,040 --> 00:11:10,160
of the things, but I will show the running demo as well. So basically what this one did


95
00:11:10,160 --> 00:11:21,280
was ran two commands, one very simple dependency resolution on IPFS and another one was using


96
00:11:21,280 --> 00:11:29,920
React as a dependency. So if you see here, this is the same page and it is running on


97
00:11:29,920 --> 00:11:38,440
IPFS and it has this import map generated and we can see this is generated natively


98
00:11:38,440 --> 00:11:45,960
from IPFS. That means that folder which has package.json, it is hosted on IPFS. There


99
00:11:45,960 --> 00:11:53,720
is no NPM in between and it can scan all of the dependencies from there and embed it here.


100
00:11:53,720 --> 00:11:58,440
This is another one, but it does not have any NPM dependency, just the local native


101
00:11:58,440 --> 00:12:15,360
IPFS dependency. Then this brings us to LogOm. What is LogOm and what is the connection with


102
00:12:15,360 --> 00:12:24,760
JSPM and so forth? So the idea is that LogOm will pick up from where JSPM left and the


103
00:12:24,760 --> 00:12:30,600
exact meaning of LogOm is not too much, not too less, just the right amount. And that


104
00:12:30,600 --> 00:12:35,280
once again circles back to HTML philosophy that abstract away all the cruft which is


105
00:12:35,280 --> 00:12:40,520
not needed and only let people interact with what they actually need and that provides


106
00:12:40,520 --> 00:12:48,600
value by some mean. It is imagined as a new kind of digital experience


107
00:12:48,600 --> 00:12:55,920
platform, which is a mouthful, but we can kind of reduce it to pins and pages. I think


108
00:12:55,920 --> 00:13:02,840
that would be quite familiar in the audience here. Imagine, say, we have a DAG and at the


109
00:13:02,840 --> 00:13:08,840
root we have HTML pages and all the dependencies connected to that page, they are also part


110
00:13:08,840 --> 00:13:15,880
of the DAG, but then we can follow all the changes throughout the lifetime of our website


111
00:13:15,880 --> 00:13:22,600
and just store them as DAGs, but use import maps to resolve the dependencies which is


112
00:13:22,600 --> 00:13:29,200
needed at that moment of time, but also kind of give all other infrastructure, including


113
00:13:29,200 --> 00:13:35,760
hosting and servers without people needing to know or understand what is IPFS, what are


114
00:13:35,760 --> 00:13:41,240
CIDs. So many unmaintained or deprecated libraries, people do not need to worry about them. So


115
00:13:41,240 --> 00:13:47,360
basically abstracting away the instability in ecosystem and providing some kind of a


116
00:13:47,360 --> 00:13:53,120
convergence between web 3 and web 2. People want sometimes some authority should take


117
00:13:53,120 --> 00:13:58,280
care of all their infrastructure needs, but also reap the benefit of innovations happening


118
00:13:58,280 --> 00:14:04,360
in decentralized space. So that is the idea basically. Like in early period of web, one


119
00:14:04,360 --> 00:14:10,480
could simply open up a text editor, create a HTML file, JavaScript, everything is interpreted,


120
00:14:10,480 --> 00:14:19,320
and it works. No longer juggling around CICD specifically for static web.


121
00:14:19,320 --> 00:14:26,720
Then there is more. So if we look at this, this is a very familiar looking package.json,


122
00:14:26,720 --> 00:14:32,540
but these keys, these are like special and this exports key is also special. This part


123
00:14:32,540 --> 00:14:37,960
of native Node.js specification, this is how it resolves. That means whenever there is


124
00:14:37,960 --> 00:14:45,360
a requirement with this module specifier and you resolve it based on which runtime it is


125
00:14:45,360 --> 00:14:52,920
specified with. So going back to this here. So we could, instead of browser, we can use


126
00:14:52,920 --> 00:14:59,920
all of those other keys, any of those keys for different, different vendors, because


127
00:14:59,920 --> 00:15:09,720
lately there has been kind of a lot of innovation or a lot of new JavaScript runtimes have emerged


128
00:15:09,720 --> 00:15:15,360
and also kind of gaining a lot of popularity in an audience, not in general audience, but


129
00:15:15,360 --> 00:15:22,320
developers. So these are like well-defined keys, part of web interoperable community


130
00:15:22,320 --> 00:15:31,040
group or working group, we can say. And these are like say official keys, but in custom


131
00:15:31,040 --> 00:15:36,080
implementation we can resolve to another one. These native key resolutions are natively


132
00:15:36,080 --> 00:15:43,600
supported already in JSPM, but in Logon, what we want to do is convert these resolved URLs


133
00:15:43,600 --> 00:15:50,440
to CIDs. That means getting rid of once again, something which may have a probability to


134
00:15:50,440 --> 00:15:57,400
break that is like say resolved URLs, because this one still expects these files to be co-located


135
00:15:57,400 --> 00:16:03,440
with package.json. But in this case, this may no longer be required. Having said that,


136
00:16:03,440 --> 00:16:09,840
all these QRs are different. So please scan them if you want to play them in real time.


137
00:16:09,840 --> 00:16:19,160
Although Logon is still in, say not open. So please show your interest.


138
00:16:19,160 --> 00:16:25,440
And this brings us to concepts of pins. So if we compare these two, here we have exports


139
00:16:25,440 --> 00:16:32,160
and here we have imports. This is also official node.js package.json API. But what is different


140
00:16:32,160 --> 00:16:40,600
here is that we can take this home prefixed by hash. We can take it as a concrete human


141
00:16:40,600 --> 00:16:51,640
facing value. That means if there is any human software change management need to be done


142
00:16:51,640 --> 00:16:57,160
across the system, across the application, this is the value. But then we no longer need


143
00:16:57,160 --> 00:17:04,640
to take care of how it resolves or where it resolves. Take that and use it as a custom


144
00:17:04,640 --> 00:17:12,800
component. So basically, we can have these CIDs on top of some custom components. And


145
00:17:12,800 --> 00:17:18,780
from the infrastructure wise, we can resolve just by if a user uploads an HTML page using


146
00:17:18,780 --> 00:17:25,520
this kind of syntax, then we can resolve these URLs and hydrate or include client-side JavaScript


147
00:17:25,520 --> 00:17:29,920
automatically to HTML page. Obviously, this is optional and it can be done by hand as


148
00:17:29,920 --> 00:17:35,800
well, but it is good to have it inbuilt in some kind of service.


149
00:17:35,800 --> 00:17:56,640
I think I ran quite fast. So that is it. Any questions?


150
00:17:56,640 --> 00:18:02,640
So great stuff on the IPFS side. I just selfishly have a terrible time building JavaScript libraries.


151
00:18:02,640 --> 00:18:07,800
I can't figure out how to get good at it. Is Legom going to help me? Can I show it my


152
00:18:07,800 --> 00:18:12,240
JavaScript library and it will say fix it like this and then I'm more eligible to participate


153
00:18:12,240 --> 00:18:16,840
in these builds? I'm not sure I got that question.


154
00:18:16,840 --> 00:18:24,080
If I don't get my dist right, will you give me hints to improve it? On my npm package?


155
00:18:24,080 --> 00:18:31,120
My npm package currently, the different CDN hosts for making a browser compatible, they


156
00:18:31,120 --> 00:18:35,440
don't like me and so it doesn't work. And so what do I do to fix that?


157
00:18:35,440 --> 00:18:45,200
Great question. So when JSTM builds and uploads to CDN here, so during this build process,


158
00:18:45,200 --> 00:18:51,000
it automatically makes it compatible to the profile it was used. So when we use browser


159
00:18:51,000 --> 00:18:56,240
profile and if there is not already, so when someone publishes, they have to use some kind


160
00:18:56,240 --> 00:19:00,160
of package JSON where they have to define this kind of resolution.


161
00:19:00,160 --> 00:19:05,480
So this resolution is not already specified in the package.json, just npm kind of automatically


162
00:19:05,480 --> 00:19:12,000
does it for you. But there can be some problems, but there is a solution to that as well. So


163
00:19:12,000 --> 00:19:17,280
we have a custom override. If some packages don't work, we let users define their custom


164
00:19:17,280 --> 00:19:21,160
overrides and then that can be resolved in turn.


165
00:19:21,160 --> 00:19:28,040
Okay. Yeah, that makes sense. I still need help making my package like that.


166
00:19:28,040 --> 00:19:32,240
Anytime. Yeah, I guess this still ends up being like


167
00:19:32,240 --> 00:19:41,440
step one, it still needs to be npm compatible, right? Like that part has to still work, right?


168
00:19:41,440 --> 00:19:46,640
Can we skip npm? That's not my actual question, but yes.


169
00:19:46,640 --> 00:19:53,520
Yes, yes. That's the whole idea. And this is a demonstration also showed. Maybe I can


170
00:19:53,520 --> 00:20:17,000
kind of come to the source code here. So here, this package, this is totally native.


171
00:20:00,000 --> 00:20:06,760
to IPS and I was able to install from this. So there is no npm involved at all, only the conventions.


172
00:20:06,760 --> 00:20:13,120
That means there is need to be a directory with associated package.json. But with logon, I'm trying


173
00:20:13,120 --> 00:20:17,640
to get rid of this as well, trying to use as much IPS as possible.


174
00:20:19,520 --> 00:20:25,040
So my actual, which is awesome, and I think partially answered your question. And that is


175
00:20:25,040 --> 00:20:33,520
great. My actual question is, who do you see as the first set of users that you're targeting? Who do


176
00:20:33,520 --> 00:20:36,120
you want to use this? Who do you want to come and use logon?


177
00:20:36,880 --> 00:20:44,480
Basically, anyone who's comfortable in writing HTML, but not so much JavaScript. And on top of it,


178
00:20:44,680 --> 00:20:47,760
anyone who doesn't like building JavaScript.


179
00:20:48,600 --> 00:20:51,080
I don't think there's anyone that likes building JavaScript.


180
00:20:51,080 --> 00:20:52,640
So anyone, everyone, basically.


181
00:20:52,640 --> 00:20:56,000
Everyone.


182
00:20:56,000 --> 00:21:00,760
Basically getting rid of build step from the front end development. That's the core of the...


183
00:21:01,080 --> 00:21:09,360
So theoretically, you could build an app that's hosted on IPFS that has a file system provided by


184
00:21:09,360 --> 00:21:17,760
WinFS, where you author something and then publish. And so all of that stuff could happen directly in


185
00:21:17,760 --> 00:21:18,800
IPFS in a browser.


186
00:21:18,800 --> 00:21:22,280
Totally. And now you see why I was so much interested in WinFS.


187
00:21:23,040 --> 00:21:23,960
Amazing. Thank you.


188
00:21:29,960 --> 00:21:34,120
So what does this mean for something like Yarn or any type of package manager that you run?


189
00:21:34,120 --> 00:21:34,960
To die, kind of.


190
00:21:34,960 --> 00:21:51,000
Kind of. I just wanted to make sure I was on the same page.
