1
00:00:00,000 --> 00:00:12,000
Today we've got talks from I guess like five or six different database technologies and


2
00:00:12,000 --> 00:00:19,040
what's cool about them of course is that they all use IPFS, IPLD and what we're hoping we


3
00:00:19,040 --> 00:00:26,680
can do today and this may be more like open discussion after lunch is talk about opportunities


4
00:00:26,680 --> 00:00:33,080
for interop and like the flexes we can do to show the other parts of the industry how


5
00:00:33,080 --> 00:00:38,560
much power we get from having these IPFS-based data structures.


6
00:00:38,560 --> 00:00:47,160
So my theory is that almost any one of the technologies we're going to hear from today,


7
00:00:47,160 --> 00:00:52,760
if the engineers sat down for an afternoon they could figure out a way to cross-index


8
00:00:52,760 --> 00:00:56,920
or reuse data structures, share it across all the databases.


9
00:00:56,920 --> 00:01:01,400
So it's not that you get it like for free no matter what, but it's like if you want


10
00:01:01,400 --> 00:01:06,360
to be able to do that kind of interop, I don't think you're going to be able to do it outside


11
00:01:06,360 --> 00:01:08,000
of this community.


12
00:01:08,000 --> 00:01:12,680
So pretty excited about that.


13
00:01:12,680 --> 00:01:18,880
So let's see, who in the room here is speaking today?


14
00:01:18,880 --> 00:01:25,000
I think me, the other speakers are probably drinking their coffee still.


15
00:01:25,000 --> 00:01:35,880
So yeah, I guess while we've got some time before the first talk from Aaron Goldman,


16
00:01:35,880 --> 00:01:41,220
maybe it makes sense to open up that discussion a little bit and see who here is like building


17
00:01:41,220 --> 00:01:44,480
toy databases or real databases.


18
00:01:44,480 --> 00:01:47,120
Anyone else besides me make databases for fun?


19
00:01:47,120 --> 00:01:48,920
All right.


20
00:01:48,920 --> 00:01:49,920
Cool.


21
00:01:49,920 --> 00:01:52,680
Do you all want to like holler out what your deal is?


22
00:01:52,680 --> 00:01:56,080
Should we like start from over here?


23
00:01:56,080 --> 00:01:57,640
Sure.


24
00:01:57,640 --> 00:02:04,640
So my name is Enrique.


25
00:02:04,640 --> 00:02:08,560
I'm with Protocol Labs, with Consensus Lab more specifically.


26
00:02:08,560 --> 00:02:16,200
I mean I have some background in distributed databases from my past, from my career.


27
00:02:16,200 --> 00:02:21,680
Right now, what I'm thinking of is, I mean it's still something in the very early design


28
00:02:21,680 --> 00:02:28,680
phase, but it's like a distributed universal database for data analytics, where everybody


29
00:02:28,680 --> 00:02:35,240
can share data into it and anyone can run nodes of that database and then the queries


30
00:02:35,240 --> 00:02:43,120
can be distributed all across this computation universe you have.


31
00:02:43,120 --> 00:02:44,120
So that's it.


32
00:02:44,120 --> 00:02:45,120
Cool.


33
00:02:45,120 --> 00:02:49,680
Yeah, so for people who just walked in, we've got like a half hour before the first talk


34
00:02:49,680 --> 00:02:53,480
starts, so we're going around and anybody who does database stuff, just kind of like


35
00:02:53,480 --> 00:02:54,480
mentioning what you do.


36
00:02:54,480 --> 00:02:57,760
Do you want to hand it behind you?


37
00:02:57,760 --> 00:03:00,360
You can also take the mic if you don't do database stuff.


38
00:03:00,360 --> 00:03:06,720
Yeah, so I'm Lucas, or Magic6k on the Falcon Slack and everywhere.


39
00:03:06,720 --> 00:03:13,280
So I work with Protocol Labs also, and I'm working, like I'm building this distributed


40
00:03:13,280 --> 00:03:20,280
block store, which is like better data layout that's very easy to put on Falcoin, and at


41
00:03:20,280 --> 00:03:25,720
the same time it also actually scales, so it's not some basic KB store that we abuse


42
00:03:25,720 --> 00:03:28,480
as a block store, it's just like block store.


43
00:03:28,480 --> 00:03:32,960
So I was thinking of building a block store that goes fast and very big.


44
00:03:32,960 --> 00:03:38,800
Yeah, that is actually a real helpful thing to do, because we all like to just be like,


45
00:03:38,800 --> 00:03:43,080
the block store, it's got it.


46
00:03:43,080 --> 00:03:50,880
I'm Daniel, I used to work on OrbitDB, and now I work on my own database, and I'm trying


47
00:03:50,880 --> 00:03:57,760
to make it so the database can keep moving forward after all the peers, all the clients


48
00:03:57,760 --> 00:04:04,000
have been unreliable and gone offline.


49
00:04:04,000 --> 00:04:07,160
Anybody else got database stories to share?


50
00:04:07,160 --> 00:04:10,160
Background in databases?


51
00:04:10,160 --> 00:04:18,280
Hi, Daniel, at Ceramic now, recently, well, 3box, and prior to that I was at InfluxDB,


52
00:04:18,280 --> 00:04:20,800
helping them build their query engine over there.


53
00:04:20,800 --> 00:04:26,000
So very interested in databases and excited to see how they map to the Web3 space.


54
00:04:26,000 --> 00:04:27,000
Cool.


55
00:04:27,000 --> 00:04:34,320
Yeah, and I think your colleague Aaron's up first.


56
00:04:34,320 --> 00:04:37,600
So all right.


57
00:04:37,600 --> 00:04:42,640
I'm his colleague Aaron, who's also at Ceramic, building a database, and I'm up first.


58
00:04:42,640 --> 00:04:43,640
Nice, that's great.


59
00:04:43,640 --> 00:04:48,160
Well, we're going to learn more about that database for sure.


60
00:04:48,160 --> 00:04:54,320
And so trying to, you know, I don't want to run early by starting the talk now, so maybe


61
00:04:54,320 --> 00:05:00,600
there's a topic that Daniel brought up on the kind of online discussions before this


62
00:05:00,600 --> 00:05:04,160
that might be an interesting one, and maybe we don't get juiced up to really get into


63
00:05:04,160 --> 00:05:09,320
it for a little bit, but it's about like how, I don't know, do you want to say what your


64
00:05:09,320 --> 00:05:10,320
thoughts were?


65
00:05:10,320 --> 00:05:17,240
When you have reliable peers, it's nice, because you can do like kind of very specific replication


66
00:05:17,240 --> 00:05:23,800
of data, and then you have kind of these, when you're syncing with services, it's a


67
00:05:23,800 --> 00:05:28,000
little bit different, but yeah.


68
00:05:28,000 --> 00:05:38,160
I guess, okay, so when we were talking about this before, my thought was as a transaction


69
00:05:38,160 --> 00:05:47,120
engine, like you can do something that's like at the data layer, I mean at the like, your


70
00:05:47,120 --> 00:05:48,280
application blocks, right?


71
00:05:48,280 --> 00:05:55,160
Like you're writing some tree updates out, and now you've got IPFS CIDs that you want


72
00:05:55,160 --> 00:05:57,080
to sync around.


73
00:05:57,080 --> 00:06:04,080
And so maybe let's call that like replication strategy A, and replication strategy B is


74
00:06:04,080 --> 00:06:10,360
going to be more like, now let's wrap those up into a car file and send that around.


75
00:06:10,360 --> 00:06:13,640
And then there's probably like replication strategy C and D, right?


76
00:06:13,640 --> 00:06:21,880
That would be more about like, I guess, leveraging the immutable identifiers and stability like


77
00:06:21,880 --> 00:06:22,880
that.


78
00:06:22,880 --> 00:06:30,080
But yeah, I don't know, are there, can we classify the possible databases in the IPFS


79
00:06:30,080 --> 00:06:38,240
immutable IPLD realm into kind of like you would outside of it, oh, this is the transaction,


80
00:06:38,240 --> 00:06:41,280
oh, Apple LTP, et cetera.


81
00:06:41,280 --> 00:06:48,280
And does that map to the verbs that the IPFS infrastructure makes available to us?


82
00:06:48,280 --> 00:06:52,160
So to me, that's an interesting open question, because I'm having to ask myself those questions


83
00:06:52,160 --> 00:06:57,880
every day about like, how am I going to implement this part of the transaction layer or whatever?


84
00:06:57,880 --> 00:07:05,720
So I don't know if anybody has thoughts on that.


85
00:07:05,720 --> 00:07:06,720
Database geeks.


86
00:07:06,720 --> 00:07:13,480
We'll write on.


87
00:07:13,480 --> 00:07:18,520
Let's see, does anybody else have any like opening topics you think we should talk about,


88
00:07:18,520 --> 00:07:20,160
like use cases for databases?


89
00:07:20,160 --> 00:07:24,080
The thing that you really wish was solved, but it's not, anything like that?


90
00:07:24,080 --> 00:07:34,160
I think we need B-trees in the advanced data layouts, because right now you can index stuff


91
00:07:34,160 --> 00:07:39,600
that's in IPFS, but we are not very good at putting indexes themselves into IPFS.


92
00:07:39,600 --> 00:07:44,440
So let's say I want to do Wikipedia over IPFS.


93
00:07:44,440 --> 00:07:50,440
I want an entire inverted index, so I can do full text search of that, and those blocks


94
00:07:50,440 --> 00:07:55,400
themselves should be in IPFS in a way that I can run that query efficiently in the browser.


95
00:07:55,400 --> 00:08:01,560
Right, and then there's just a bunch of really cool things that you get for free when you


96
00:08:01,560 --> 00:08:02,560
build it that way.


97
00:08:02,560 --> 00:08:08,520
Like Franz's talk yesterday about the media archiving stuff that he's doing with like


98
00:08:08,520 --> 00:08:18,600
a European government organization was enlightening, because he was as an implementer not trying


99
00:08:18,600 --> 00:08:22,520
to be theoretical about the database stuff, but he was still hitting on the same patterns


100
00:08:22,520 --> 00:08:25,300
that we're seeing when we build.


101
00:08:25,300 --> 00:08:32,480
So like you've got a collection of content, and you've got it archived in IPFS, and you


102
00:08:32,480 --> 00:08:35,320
can put, this is what, I don't think he did this, but he was like, this would work.


103
00:08:35,320 --> 00:08:40,840
You can put it in Elasticsearch, and then have Elasticsearch, when it returns the results,


104
00:08:40,840 --> 00:08:45,840
that also return the CIDs, and then use those as proofs to replicate the underlying data,


105
00:08:45,840 --> 00:08:48,480
and then rerun the query on the client.


106
00:08:48,480 --> 00:08:54,640
So it's that kind of stuff that when the index is represented in a IPLD graph, then you don't


107
00:08:54,640 --> 00:08:56,880
even have to jump through hoops to do that, right?


108
00:08:56,880 --> 00:09:02,680
It's almost like thinking in terms of the proof in the related block set is the easiest


109
00:09:02,680 --> 00:09:03,680
way to do it.


110
00:09:03,680 --> 00:09:07,600
So yeah, there's a bunch of benefits to getting indexes into the data structures.


111
00:09:07,600 --> 00:09:12,640
I think about things like Google searched the web for us, and they built an index of


112
00:09:12,640 --> 00:09:16,760
the web, and we are welcome to use their search engine, but we are not welcome to use their


113
00:09:16,760 --> 00:09:17,760
index.


114
00:09:17,760 --> 00:09:22,160
To some extent, we can build much more powerful search algorithms if the thing that we are


115
00:09:22,160 --> 00:09:26,520
collaboratively building isn't, I build a search engine, and you build a search engine,


116
00:09:26,520 --> 00:09:30,480
and someone else builds a search engine, but we collectively share the effort of building


117
00:09:30,480 --> 00:09:35,080
an index, and now we can all run whatever algorithms we want, because there is a large


118
00:09:35,080 --> 00:09:36,080
shared index.


119
00:09:36,080 --> 00:09:41,080
Right, yeah, and for the folks at home who aren't fully Merkle-brained yet...


120
00:09:41,080 --> 00:09:42,080
What?


121
00:09:42,080 --> 00:09:45,400
Surely no such person exists.


122
00:09:45,400 --> 00:09:46,960
It all sounds super dangerous.


123
00:09:46,960 --> 00:09:50,000
Let's collaborate on indexing together, right?


124
00:09:50,000 --> 00:09:53,320
No, these data structures are immutable, so you can't mess it up.


125
00:09:53,320 --> 00:09:58,440
You can literally do all the indexing you want, and I can totally ignore you.


126
00:09:58,440 --> 00:10:06,040
And so that opens up the space for data collaboration in a way that is also, I think, really powerful.


127
00:10:06,040 --> 00:10:13,120
If literally every operation has to be a fork, then letting people operate on your data is


128
00:10:13,120 --> 00:10:30,240
lower risk.
