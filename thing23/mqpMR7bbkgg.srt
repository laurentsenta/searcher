1
00:00:00,000 --> 00:00:10,000
Hi everyone, my name is Alex, I am aching brain on the internet, I am on the IP Stewards


2
00:00:10,000 --> 00:00:16,160
team at Protocol Labs, I look after JSIPFS and JSLibP2P, but today I'm here to talk to


3
00:00:16,160 --> 00:00:25,760
you about Helia. Helia is the new implementation of IPFS, all written in JavaScript, we are


4
00:00:25,760 --> 00:00:33,440
trying to basically apply the learnings of the last five years or so to what a new implementation


5
00:00:33,440 --> 00:00:39,520
could look like. It shares a lot of components with the existing JSIPFS, the lower level


6
00:00:39,520 --> 00:00:47,000
stuff so libp2p, bitswap, UnixFS and so on, but the top level APIs have all been completely


7
00:00:47,000 --> 00:00:54,320
redesigned to just be more ergonomic, more usable, try to think like what would a user


8
00:00:54,320 --> 00:01:01,440
want when they are trying to integrate IPFS with their application and the output of that


9
00:01:01,440 --> 00:01:10,040
is Helia. So it's a lot smaller, there's a lot less duplication, one of the big challenges


10
00:01:10,040 --> 00:01:17,000
with JSIPFS was always trying to chase Qubo for features and implementation details and


11
00:01:17,000 --> 00:01:21,760
that kind of thing, without really thinking like is it actually the best thing for JavaScript


12
00:01:21,760 --> 00:01:27,280
given the use cases and the deployment environments and that kind of thing. So this is like a


13
00:01:27,280 --> 00:01:34,320
completely new blue sky thinking, everything is off the table, what could it be to make


14
00:01:34,320 --> 00:01:41,200
it just smaller, more composable, more observable, because we want people to be able to dig deep


15
00:01:41,200 --> 00:01:47,160
into it and understand what's happening when something isn't working and which component


16
00:01:47,160 --> 00:01:52,200
is the one that has the problem because your typical IPFS implementation has an awful lot


17
00:01:52,200 --> 00:01:57,920
of moving parts and if they aren't aligned perfectly then things tend not to work properly


18
00:01:57,920 --> 00:02:02,680
and so the question is like what isn't aligned, why isn't it working, so we definitely want


19
00:02:02,680 --> 00:02:11,160
that to be a focus just to make it more usable. The environments it targets are Node, browsers,


20
00:02:11,160 --> 00:02:19,320
Electron, hopefully Deno, still waiting for a few APIs to be implemented, all of these


21
00:02:19,320 --> 00:02:23,920
things, it's going to be amazing. I have two talks tomorrow which you should come to if


22
00:02:23,920 --> 00:02:29,840
you want to find out more, they're in the IPFS on the web track, the first is Hello


23
00:02:29,840 --> 00:02:36,040
Helia at 1.30 I think and then 2 o'clock is going to be the one about performance considerations,


24
00:02:36,040 --> 00:02:39,920
they're straight after lunch, they'll be in one of the rooms over there somewhere and


25
00:02:39,920 --> 00:02:44,000
you should come and find me to talk about it afterwards, I want to know the use cases,


26
00:02:44,000 --> 00:02:50,640
the problems that you have, like please open issues, we have two interesting repos, there's


27
00:02:50,640 --> 00:02:56,440
the Helia repo where all the source code lives and you can find links to documentation there


28
00:02:56,440 --> 00:03:02,680
and how to do common tasks and that kind of thing and then there's the examples repo which


29
00:03:02,680 --> 00:03:08,400
contains a few examples now, we're adding to them of how to integrate Helia with different


30
00:03:08,400 --> 00:03:15,320
bundlers, different technologies, how to do common tasks, please open issues and come


31
00:03:15,320 --> 00:03:42,840
and talk to me. Thank you very much, this is Helia.
