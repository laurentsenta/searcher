1
00:00:00,000 --> 00:00:10,080
Hello. Can everyone hear me? Yeah. So I realize I'm in the awkward sandwich between break


2
00:00:10,080 --> 00:00:15,440
and happy hour, so I'll try to be more enthusiastic than my jet-lagged self probably would normally


3
00:00:15,440 --> 00:00:16,440
be.


4
00:00:16,440 --> 00:00:21,000
So I'm going to be talking about game asset loading on IPFS. A lot of unsexy words, but


5
00:00:21,000 --> 00:00:27,760
it's actually really cool. So this is an adaptation of a talk we actually gave at the Game Developers


6
00:00:27,760 --> 00:00:32,440
Conference a few weeks ago. So I'm going to start with, instead of pitching IPFS to a


7
00:00:32,440 --> 00:00:38,280
room of gamers, pitching gaming to a room of IPFSers, I guess, is the word. Then get


8
00:00:38,280 --> 00:00:43,640
into problem, how IPFS solved it, game engine integration, and then what's coming down the


9
00:00:43,640 --> 00:00:45,360
pipe.


10
00:00:45,360 --> 00:00:52,040
So why gaming? I took this out of a World Economic Forum report. Interestingly, they


11
00:00:52,040 --> 00:00:56,800
cover gaming. But there's really three things that stand out to me and that I really like


12
00:00:56,800 --> 00:01:03,440
about this chart. One is it shows the incredibly changing nature of how people game. There's


13
00:01:03,440 --> 00:01:09,560
like arcade games to console, mobile, and then this tiny sliver of VR gaming on top,


14
00:01:09,560 --> 00:01:11,400
and who knows what's next.


15
00:01:11,400 --> 00:01:18,120
The second is gaming is huge. It's like $180 billion a year revenue market. And the third


16
00:01:18,120 --> 00:01:22,640
is it's growing really quickly. It's like, I think, 13% compound annual growth rate,


17
00:01:22,640 --> 00:01:27,320
which is a really good business to be in. So I think it sort of encompasses the why


18
00:01:27,320 --> 00:01:31,320
gaming question for me.


19
00:01:31,320 --> 00:01:38,120
And so why IPFS and gaming? We're not the first people to think this is a natural mind


20
00:01:38,120 --> 00:01:44,200
meld. Not by any means. This is a little bit of a logo wall of partners who use IPFS for


21
00:01:44,200 --> 00:01:50,200
some of their gaming use cases. But what we noticed was a lot of it is very centric around


22
00:01:50,200 --> 00:01:58,840
NFTs or user created sharing art, things like that, which sort of artificially narrowed


23
00:01:58,840 --> 00:02:04,520
the aperture of things IPFS was addressing. IPFS can do a lot more than that.


24
00:02:04,520 --> 00:02:10,000
And that wasn't an insight we came to. I'm from PL, definitely not giving us credit for


25
00:02:10,000 --> 00:02:15,120
that. That's actually something a few gaming studios came to the realization of. So we


26
00:02:15,120 --> 00:02:20,160
partnered with one of them. They're called 3S Studio. So whenever I say we, I mean PL


27
00:02:20,160 --> 00:02:26,280
and our gaming studio partners who actually know games in and out. They looked to see


28
00:02:26,280 --> 00:02:32,520
how can IPFS be a core part of the game dev experience and improve actual delivery and


29
00:02:32,520 --> 00:02:38,780
distribution of any game, web 3, web 2, console, arcade, whatever it be.


30
00:02:38,780 --> 00:02:44,080
And so what is the problem? The main problem they went out to solve is solving the game


31
00:02:44,080 --> 00:02:49,560
size versus storage size problem. The numbers on the right I just put up as an illustrative


32
00:02:49,560 --> 00:02:54,560
example. I was not lucky enough to get a PS5, but for anyone who did, you probably have


33
00:02:54,560 --> 00:03:00,720
around 600 gigs of usable space on there after OS installs and all that. And then if you


34
00:03:00,720 --> 00:03:05,520
want to play Call of Duty Black Ops, which I hear you should if you have a PS5, that's


35
00:03:05,520 --> 00:03:12,800
a 280 gig game file. You have to download the entire thing or nearly the entire thing


36
00:03:12,800 --> 00:03:19,560
to play and enjoy. That's not much. So the problem they solve is games are getting more


37
00:03:19,560 --> 00:03:23,280
higher fidelity. They're getting more complex, but our storage size on consoles actually


38
00:03:23,280 --> 00:03:28,760
shrinking. So a lot of people have weird hacks where you like open up the PS5, gosh, and


39
00:03:28,760 --> 00:03:36,200
then like shove in your custom USB stick into a port that Sony has helpfully provided there.


40
00:03:36,200 --> 00:03:43,400
But basically you run into a lot of problems here. And so the time to fun metric is much


41
00:03:43,400 --> 00:03:48,840
higher. You have to sit and wait for a download to happen before you click play. You have


42
00:03:48,840 --> 00:03:52,600
to keep swapping games. I'm sure most folks with consoles have had this problem at some


43
00:03:52,600 --> 00:03:57,600
point, maybe on the Switch and the PS5. You have to choose what games you take with you.


44
00:03:57,600 --> 00:04:04,600
And so they saw IPFS as a way to solve this. And so there's a question of where do you


45
00:04:04,600 --> 00:04:11,520
solve this? Now, we wanted to meet game devs where they are. And where they are is in game


46
00:04:11,520 --> 00:04:17,880
engines. The two biggest game engines are Unity and Unreal. They have pretty different


47
00:04:17,880 --> 00:04:24,680
sort of models of how it's built up. But what they are is like that's where the game gets


48
00:04:24,680 --> 00:04:31,520
built. It's not only the framework. It's like Ruby on Rails, but it's also the IDE. Everything


49
00:04:31,520 --> 00:04:38,280
you do, design, art, it all ultimately goes in there. And so the nice thing about them


50
00:04:38,280 --> 00:04:44,080
is they all have a plugin framework that not only allows things like textures and stuff


51
00:04:44,080 --> 00:04:50,120
to be imported, but you can also import functionality. Similar to in Visual Studio when you want


52
00:04:50,120 --> 00:04:56,600
to have your hotkey shortcut for something or anything like that. And so the idea 3S


53
00:04:56,600 --> 00:05:03,240
Studio came up with was let's build IPFS plugins that allow game devs during the build process


54
00:05:03,240 --> 00:05:11,680
to take any files, textures, assets, game files, entire levels, package that into a


55
00:05:11,680 --> 00:05:16,960
way that can be shipped to any IPFS provider of their choice, and allow game devs to set


56
00:05:16,960 --> 00:05:22,760
triggers for when these assets should be loaded and unloaded. And what that means is as a


57
00:05:22,760 --> 00:05:29,120
game dev, I can just develop my game, and then right before hitting build, I say these


58
00:05:29,120 --> 00:05:32,760
files should be downloaded when the user hits this level. It should be downloaded when the


59
00:05:32,760 --> 00:05:39,280
user does that action. And then after that, I don't have to care. That's a goal.


60
00:05:39,280 --> 00:05:45,680
So benefits to that approach. So one, installation size. So 3S Studio built an example car racing


61
00:05:45,680 --> 00:05:51,720
game that was initially two gigs, like everything, textures, maps, whatever. They managed to


62
00:05:51,720 --> 00:05:59,960
shrink that down to 38 megs. And then depending on user actions in game, download assets.


63
00:05:59,960 --> 00:06:05,240
For a game dev, a big problem is updates. So say I have my car racing game, and I update


64
00:06:05,240 --> 00:06:11,640
my 911 Carrera skin. Traditionally, you have to do a full game rebuild and ship that giant


65
00:06:11,640 --> 00:06:17,200
file to Steam, and then wait for all your clients to download it. If you're asynchronously


66
00:06:17,200 --> 00:06:22,000
loading these packages, all you have to do is do an incremental build, ship it to IPFS.


67
00:06:22,000 --> 00:06:26,160
Whoever is making that call client-side will get the latest version.


68
00:06:26,160 --> 00:06:30,080
Cosmetics on demand. If folks have played Call of Duty, you know you're only playing


69
00:06:30,080 --> 00:06:34,000
against 10 other, there are five people on your team, five people on the opposing team,


70
00:06:34,000 --> 00:06:38,280
but there are a thousand different skins. You don't need those skins occupying disk


71
00:06:38,280 --> 00:06:44,040
space on your mobile. Single player lends itself really well to this modality. A lot


72
00:06:44,040 --> 00:06:48,840
of games are linear, so you know if you finish level one, you're going to level two. If you


73
00:06:48,840 --> 00:06:52,040
finish level two, you're going to level three, and you're very unlikely to go back to the


74
00:06:52,040 --> 00:06:57,040
tutorial. And so that lends itself very well to basically setting triggers of, hey, I'm


75
00:06:57,040 --> 00:07:02,040
in level one, download all the assets for level two, and maybe let's unload the tutorial.


76
00:07:02,040 --> 00:07:08,520
Finally, you can allow players to decide. So maybe I have a top-end Samsung phone with


77
00:07:08,520 --> 00:07:12,160
one terabyte expandable storage, and I don't care. I just want an offline game all the


78
00:07:12,160 --> 00:07:20,640
time. Sure. But maybe I don't. Maybe I have a low-end Oppo with 256 gigs. The first thing


79
00:07:20,640 --> 00:07:25,000
I'm going to delete is your game whenever I get the memory full notification.


80
00:07:25,000 --> 00:07:31,040
And finally, user-driven content. I mean, anyone with kids here knows Roblox, Minecraft,


81
00:07:31,040 --> 00:07:37,960
user-driven content is the future of gaming. IPFS, by nature of being peer-to-peer, lends


82
00:07:37,960 --> 00:07:43,640
itself really well to distributing user-driven content as generated client-side that's viewed


83
00:07:43,640 --> 00:07:49,040
in potentially hundreds of different computers. And so what was the first thing we did? Basic


84
00:07:49,040 --> 00:07:57,880
use cases. How do you take text, images, binary data, or any files, and upload and download


85
00:07:57,880 --> 00:08:03,880
them to and from IPFS? This very janky example on the right is actually running within Unity,


86
00:08:03,880 --> 00:08:09,560
and it just shows we're putting in an IPFS gateway, putting in a CID, and we're able


87
00:08:09,560 --> 00:08:16,120
to retrieve data in the game engine. And the example below does the opposite.


88
00:08:16,120 --> 00:08:20,840
But that's not why we're here. We're here to talk about more advanced use cases. And


89
00:08:20,840 --> 00:08:27,240
when we say advanced, what we mean is taking advantage of the game engines themselves to


90
00:08:27,240 --> 00:08:32,380
allow game devs to publish things to IPFS without really thinking about it.


91
00:08:32,380 --> 00:08:36,760
And so there's this concept called modular features. Modular features, essentially think


92
00:08:36,760 --> 00:08:44,320
of them as a dev-driven way of packaging files. And so this could be as atomic as a texture,


93
00:08:44,320 --> 00:08:50,960
or I could package everything required to run a level into one file. And so during the


94
00:08:50,960 --> 00:08:56,200
build process, the game dev basically decides how to package those things together. And


95
00:08:56,200 --> 00:09:04,400
then our plugin, when the developer hits build, builds those into chunks, uploads those into


96
00:09:04,400 --> 00:09:11,200
IPFS, creates a manifest file, tracking CIDs to those package files. And then on the client


97
00:09:11,200 --> 00:09:17,000
side, whenever the client downloads the minimal binary required to at least boot the game,


98
00:09:17,000 --> 00:09:23,280
depending on user actions, can use the manifest file to look up a CID and start pulling in


99
00:09:23,280 --> 00:09:27,760
those package files. And so the examples here you're seeing is


100
00:09:27,760 --> 00:09:34,320
the users interacting with these levels. And you can see there's sort of a waterfall UI


101
00:09:34,320 --> 00:09:39,440
with an Unreal engine. They can actually use parts of the plugin to set download trigger


102
00:09:39,440 --> 00:09:47,800
events. And so I'd be amiss if I didn't actually show a game during a gaming demo. So what


103
00:09:47,800 --> 00:09:54,280
this is is actually we've downloaded basically a landing page for a game. You can see there


104
00:09:54,280 --> 00:09:59,920
are three tiles here. This is about 30 megs of data. And what it's doing is allowing us


105
00:09:59,920 --> 00:10:05,400
to play a game of two gigs. So I as a user might want to go into the hub level. And what


106
00:10:05,400 --> 00:10:10,200
we just did is we loaded everything you see here, the player, the player actions, everything


107
00:10:10,200 --> 00:10:17,720
just came in via IPFS. It's all one root CID. And now that it's come in, the user can start


108
00:10:17,720 --> 00:10:22,080
to interact with the world. And depending on interactions, we can start downloading


109
00:10:22,080 --> 00:10:26,520
other assets. So for example, here, we're just going to interact with this door here


110
00:10:26,520 --> 00:10:31,080
and start triggering a download of the gallery, which is another level in this game. But it


111
00:10:31,080 --> 00:10:36,000
could be something complex like you finish a quest, you battle with the robot, and you're


112
00:10:36,000 --> 00:10:41,680
almost going to win. And as you can see, it starts pulling this in via IPFS while I still


113
00:10:41,680 --> 00:10:46,040
play the game. So it doesn't need to be so obvious that you're downloading resources,


114
00:10:46,040 --> 00:10:51,640
but it could be on the back end. And now I interact with the door. I go into the gallery.


115
00:10:51,640 --> 00:10:59,760
And here, all of the art pieces on the wall are actually pulling in NFTs from using CID.


116
00:10:59,760 --> 00:11:05,000
So all of that's in the manifest file that got published when we built this game. And


117
00:11:05,000 --> 00:11:10,200
finally, there's another level that was downloading in the background here called Midnight Drifter.


118
00:11:10,200 --> 00:11:15,240
And if I interact with this door here, it takes us to what looks like a completely different


119
00:11:15,240 --> 00:11:20,440
game. This is the car racing game, but is actually part of the same game build. And


120
00:11:20,440 --> 00:11:25,480
this is not something I shipped because I don't know if the user wants to play this.


121
00:11:25,480 --> 00:11:30,300
But now I can let my user go in. And maybe in the background, I can unload the gallery.


122
00:11:30,300 --> 00:11:34,000
Maybe there's no way the user should go back there. And so now we can start playing the


123
00:11:34,000 --> 00:11:39,920
game. And this is really important for a lot of social and casual gaming. If you think


124
00:11:39,920 --> 00:11:46,560
about your mobile, that time to fun metric is critically correlated with engagement and


125
00:11:46,560 --> 00:11:52,440
revenue. If you're waiting around 15 minutes to download a game, you are orders of magnitude


126
00:11:52,440 --> 00:12:00,640
more likely to just pause it and forget about it. And so this minimizes that metric.


127
00:12:00,640 --> 00:12:07,960
And so the different use cases here, there's plug it into the CICD pipeline. There's faster


128
00:12:07,960 --> 00:12:13,680
updates for patching. And the idea is if you see something wrong or you want to update


129
00:12:13,680 --> 00:12:16,960
something, you should be able to do that in less than an hour. The standard right now,


130
00:12:16,960 --> 00:12:23,200
if you're going via Steam, is at best 24 hours, sometimes stretches into a week.


131
00:12:23,200 --> 00:12:28,600
The second is multiplayer. So when a user builds an asset, it can be converted into


132
00:12:28,600 --> 00:12:34,560
a DAG right there and then. You can ship that to IPFS. And then your server, your game server,


133
00:12:34,560 --> 00:12:40,920
can asynchronously download that CID or download it via the CID and do validation and so on.


134
00:12:40,920 --> 00:12:44,280
And so you can sort of have this optimistic approach to distributing content, depending


135
00:12:44,280 --> 00:12:51,200
on your approach as a game dev, to doing that without centralizing risk in one game server.


136
00:12:51,200 --> 00:12:56,400
And third, asset sharing. I think the really exciting vision here is ultimately if anyone


137
00:12:56,400 --> 00:12:59,120
starts playing FIFA with their friends and you have a Switch and the other person has


138
00:12:59,120 --> 00:13:06,520
a PS5, you can't. It sucks. But those assets are the same. Holland is Holland, no matter


139
00:13:06,520 --> 00:13:14,480
where you play him. And so the point of that is if I'm on a computer and you're on a PS5,


140
00:13:14,480 --> 00:13:18,960
we should be able to share assets. And if you have that CID tracking, you actually can.


141
00:13:18,960 --> 00:13:24,280
A lot of textures are reusable between game engines and between consoles.


142
00:13:24,280 --> 00:13:31,120
And so what's next? One really unsexy automation. It needs to be actually baked into the build


143
00:13:31,120 --> 00:13:36,680
pipeline. Critically important here is also IPNS, because versioning of these files is


144
00:13:36,680 --> 00:13:42,280
really important. You might update the armor on an avatar. You might update the skin on


145
00:13:42,280 --> 00:13:48,280
a car, whatever it may be. And so an IPNS-driven manifest file actually lends itself really


146
00:13:48,280 --> 00:13:52,280
well here, because you could just have clients download the latest version, depending on


147
00:13:52,280 --> 00:13:57,080
that record. And the idea is if you have an existing game, you should be able to convert


148
00:13:57,080 --> 00:14:01,280
it in under an hour, because you're probably already using the modular game features built


149
00:14:01,280 --> 00:14:06,440
into a game engine. And the second is import anything, sort of having standard connectors


150
00:14:06,440 --> 00:14:13,560
for often used data formats for textures, meshes, and so on. And then also do things


151
00:14:13,560 --> 00:14:19,920
like maybe you want to publish low-fidelity versions of things in your minimal game build


152
00:14:19,920 --> 00:14:24,280
so people can still play offline. But if you have a good enough connection, start downloading


153
00:14:24,280 --> 00:14:30,560
that high-res stuff. So you can have sort of different strategies around data import.


154
00:14:30,560 --> 00:14:37,520
And yeah, I think that's us at our booth at GDC two weeks ago. And there's a lot of people


155
00:14:37,520 --> 00:14:42,520
here, so when I say we, I'm very expensive. There's Adam, who leads 3S Studio, and then


156
00:14:42,520 --> 00:14:55,080
a host of other folks from Filecoin Foundation and PL. But thank you.


157
00:14:55,080 --> 00:15:06,400
Any questions? Yeah. So assets on demand is not a new technology, like Web 2 did that.


158
00:15:06,400 --> 00:15:13,480
Wouldn't it be in the true spirit of Web 3 that a client can serve assets to other clients?


159
00:15:13,480 --> 00:15:16,360
Like are you also shipping IPFS node with the game?


160
00:15:16,360 --> 00:15:23,080
Yeah, so that's not the current implementation. I think we're trying to get to like MVP right


161
00:15:23,080 --> 00:15:27,800
now that Unity and Unreal will accept in their official stores. The idea is to do that, especially


162
00:15:27,800 --> 00:15:33,480
for user-driven content. And that's what one of the points here is like shipping with dedicated


163
00:15:33,480 --> 00:15:40,120
servers. So a lot of, for example, like real-time strategy games and so on, the host of the


164
00:15:40,120 --> 00:15:45,360
game actually is the dedicated server. And so for things like that, like should they


165
00:15:45,360 --> 00:15:49,280
be running an IPFS node? Probably. And that way they can directly distribute without your


166
00:15:49,280 --> 00:15:53,880
game server getting in the middle and introducing a bunch of latency. So it depends on the type


167
00:15:53,880 --> 00:16:01,800
of game. And there are, we also thought about like why IPFS versus just an FTP server, right?


168
00:16:01,800 --> 00:16:07,240
There's a lot of risks around DDoSing and attacks. And a lot of games are built by indie


169
00:16:07,240 --> 00:16:12,960
studios who just don't want to run infra. They would rather use a much more robust,


170
00:16:12,960 --> 00:16:17,160
unattackable network. When games go viral, the first thing people do is try to DDoS it.


171
00:16:17,160 --> 00:16:19,360
That's just like what teenagers do, apparently.


172
00:16:19,360 --> 00:16:25,880
There's also like an increasing number of games that are unplayable because the company


173
00:16:25,880 --> 00:16:27,680
is trying to serve as offices.


174
00:16:27,680 --> 00:16:32,520
Right, exactly. And that was a big thing that I didn't realize going into this is like game


175
00:16:32,520 --> 00:16:38,200
preservation is a big topic. And so if you have, like if you're an indie game dev and


176
00:16:38,200 --> 00:16:42,980
you might run out of funds to post all this infra, you can have users replicate a lot


177
00:16:42,980 --> 00:16:48,640
of that data, right? A lot of those CIDs and everything could be opened up. So that's another


178
00:16:48,640 --> 00:16:56,680
angle that we heard from folks we met.


179
00:16:56,680 --> 00:16:59,320
Thanks a lot for sharing. I think we were dancing around it. Maybe I missed it. But


180
00:16:59,320 --> 00:17:03,280
where, so where are the game assets actually getting pinned?


181
00:17:03,280 --> 00:17:08,640
So during the build process, you can set whichever IPFS provider you want. You could set that


182
00:17:08,640 --> 00:17:15,240
to localhost. You could set that to Web3 storage or any Cloudflare servers, whatever the dev


183
00:17:15,240 --> 00:17:20,560
wants really. So we talked to a few people who, for example, they serve lots and lots


184
00:17:20,560 --> 00:17:24,680
of casual games. So like Think Candy Crush type games, but they don't know what users


185
00:17:24,680 --> 00:17:29,080
are going to like want to play. So they'll have a little mobile launcher where people


186
00:17:29,080 --> 00:17:36,000
go in, then see the games and then want to play. And so for things like that, they want


187
00:17:36,000 --> 00:17:41,280
to run it on their own dedicated servers that are like, you know, strategically geocached


188
00:17:41,280 --> 00:17:45,960
in certain places, depending on their user base. And they could just use Cloudflare's,


189
00:17:45,960 --> 00:17:50,920
you know, IPFS gateway or whatever, whatever it may be. So the idea is to be completely


190
00:17:50,920 --> 00:17:55,000
agnostic to delivery method.


191
00:17:55,000 --> 00:17:59,040
When you were at GDC, you're talking to game publishers and getting feedback, right?


192
00:17:59,040 --> 00:18:00,040
Yeah.


193
00:18:00,040 --> 00:18:05,160
Did they have any concerns about assets being permissioned or being encrypted or anything


194
00:18:05,160 --> 00:18:06,840
like that?


195
00:18:06,840 --> 00:18:14,400
Yeah. We heard this from Unity specifically. I think they like, them and Steam like the


196
00:18:14,400 --> 00:18:19,580
gatekeeping. There's obviously content moderation stuff around that, which makes complete sense.


197
00:18:19,580 --> 00:18:24,720
You don't want, they don't necessarily want game devs to be able to push whatever asset


198
00:18:24,720 --> 00:18:30,640
at any point in time after the review process is done. Similar to how Apple gets a lot of


199
00:18:30,640 --> 00:18:38,800
its app store stuff. But they got behind the message. And so for the incremental build


200
00:18:38,800 --> 00:18:46,240
pipeline stuff, they actually said that would make their life easier because it allows them


201
00:18:46,240 --> 00:18:52,880
to review exactly the things that are updated versus the entire game file as a whole again.


202
00:18:52,880 --> 00:18:59,520
And so they could just review individual pack files rather than the 200 gig build.


203
00:18:59,520 --> 00:19:03,200
There are other gaming engines that are open source like Godot, for example. They were


204
00:19:03,200 --> 00:19:08,640
super into it because they don't have any gating mechanism whatsoever, even today. So


205
00:19:08,640 --> 00:19:15,880
they're like, if this helps delivery, then sure.


206
00:19:15,880 --> 00:19:22,920
Any other questions?


207
00:19:22,920 --> 00:19:28,640
Given the pinpoints in running IPFS and broad that we just discussed, especially since these


208
00:19:28,640 --> 00:19:37,520
are some game assets can be very large and unpopular games can be very highly requested.


209
00:19:37,520 --> 00:19:41,920
What experiences have you had running systems like this in production? Have you put stuff


210
00:19:41,920 --> 00:19:47,760
like this in production or is it mostly just like data?


211
00:19:47,760 --> 00:19:53,320
The plugins, so Unity, we're in talks with them literally next week to have it published


212
00:19:53,320 --> 00:19:58,960
in the game store. Unreal is being updated in the next two weeks. So the short answer


213
00:19:58,960 --> 00:20:12,320
to that question is no.


214
00:20:00,000 --> 00:20:06,600
However, we did see an interesting use case where a game publisher was shipping game files over IPFS already.


215
00:20:06,600 --> 00:20:12,200
This is Valis specifically. And so they're shipping 20 gig files and having a lot of trouble with it.


216
00:20:12,200 --> 00:20:20,400
They are looking to do, to ship around diffs of DAGs rather than entire DAGs.


217
00:20:20,400 --> 00:20:24,200
And I think there's a couple of PRs that have been open for a couple of years.


218
00:20:24,200 --> 00:20:34,400
And so they see that as a big solution for shipping things like this, like larger game files or larger files in general over IPFS.


219
00:20:34,400 --> 00:20:42,000
Diffing, building a car file, shipping the car file off only the diffs and then rebuilding that client side.


220
00:20:42,000 --> 00:20:45,800
So that's something we're in talks with them about to build.


221
00:20:45,800 --> 00:20:51,400
We think that will help individual games but also then game publishers deliver these larger files.


222
00:20:51,400 --> 00:20:54,400
I think that's all. All right. Thank you.
